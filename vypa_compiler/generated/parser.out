Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    LBRACKET
    RBRACKET

Grammar

Rule 0     S' -> start
Rule 1     start -> program
Rule 2     program -> func_def program
Rule 3     program -> class_def program
Rule 4     program -> empty
Rule 5     empty -> <empty>
Rule 6     func_def -> func_header func_body
Rule 7     func_header -> var_type ID LPAREN param_list RPAREN
Rule 8     func_body -> statement_new_scope
Rule 9     param_list -> VOID
Rule 10    param_list -> func_param
Rule 11    func_param -> func_param_def next_param
Rule 12    func_param_def -> var_type ID
Rule 13    next_param -> COMMA func_param
Rule 14    next_param -> empty
Rule 15    class_def -> CLASS ID COLON ID class_body
Rule 16    class_body -> LBRACE class_member_list RBRACE
Rule 17    class_member_list -> class_member
Rule 18    class_member_list -> empty
Rule 19    class_member -> class_member_def class_next_member
Rule 20    class_member_def -> var_def
Rule 21    class_member_def -> func_def
Rule 22    class_next_member -> class_member
Rule 23    class_next_member -> empty
Rule 24    var_type -> INT
Rule 25    var_type -> STRING
Rule 26    var_type -> VOID
Rule 27    var_type -> ID
Rule 28    statement -> var_def statement
Rule 29    statement -> var_assignment statement
Rule 30    statement -> statement_expr statement
Rule 31    statement -> statement_return statement
Rule 32    statement -> statement_while statement
Rule 33    statement -> statement_if statement
Rule 34    statement -> statement_this statement
Rule 35    statement -> statement_id statement
Rule 36    statement -> empty
Rule 37    statement_new_scope -> LBRACE statement RBRACE
Rule 38    statement_if -> IF LPAREN expr RPAREN statement_new_scope ELSE statement_new_scope
Rule 39    statement_while -> WHILE LPAREN expr RPAREN statement_new_scope
Rule 40    statement_return -> RETURN expr SEMI
Rule 41    statement_this -> THIS PERIOD ID EQUALS expr SEMI
Rule 42    statement_id -> ID PERIOD ID EQUALS expr SEMI
Rule 43    statement_expr -> expr SEMI
Rule 44    var_assignment -> ID EQUALS expr SEMI
Rule 45    var_def -> var_type ID multiple_var_def
Rule 46    multiple_var_def -> SEMI
Rule 47    multiple_var_def -> COMMA ID multiple_var_def
Rule 48    expr -> LPAREN expr RPAREN
Rule 49    expr -> ID
Rule 50    expr -> INT_CONST
Rule 51    expr -> STRING_CONST
Rule 52    expr -> MINUS expr
Rule 53    expr -> expr PLUS expr
Rule 54    expr -> expr MINUS expr
Rule 55    expr -> expr TIMES expr
Rule 56    expr -> expr DIVIDE expr
Rule 57    expr -> LNOT expr
Rule 58    expr -> expr LOR expr
Rule 59    expr -> expr LAND expr
Rule 60    expr -> expr LT expr
Rule 61    expr -> expr LE expr
Rule 62    expr -> expr GE expr
Rule 63    expr -> expr GT expr
Rule 64    expr -> expr EQ expr
Rule 65    expr -> expr NE expr
Rule 66    expr -> LPAREN INT RPAREN expr
Rule 67    expr -> LPAREN STRING RPAREN expr
Rule 68    expr -> NEW ID
Rule 69    expr -> ID PERIOD expr
Rule 70    expr -> THIS PERIOD expr
Rule 71    expr -> SUPER PERIOD expr
Rule 72    expr -> ID LPAREN expr_list RPAREN
Rule 73    expr -> ID LPAREN RPAREN
Rule 74    expr_list -> expr next_expr
Rule 75    next_expr -> COMMA expr_list
Rule 76    next_expr -> empty

Terminals, with rules where they appear

CLASS                : 15
COLON                : 15
COMMA                : 13 47 75
DIVIDE               : 56
ELSE                 : 38
EQ                   : 64
EQUALS               : 41 42 44
GE                   : 62
GT                   : 63
ID                   : 7 12 15 15 27 41 42 42 44 45 47 49 68 69 72 73
IF                   : 38
INT                  : 24 66
INT_CONST            : 50
LAND                 : 59
LBRACE               : 16 37
LBRACKET             : 
LE                   : 61
LNOT                 : 57
LOR                  : 58
LPAREN               : 7 38 39 48 66 67 72 73
LT                   : 60
MINUS                : 52 54
NE                   : 65
NEW                  : 68
PERIOD               : 41 42 69 70 71
PLUS                 : 53
RBRACE               : 16 37
RBRACKET             : 
RETURN               : 40
RPAREN               : 7 38 39 48 66 67 72 73
SEMI                 : 40 41 42 43 44 46
STRING               : 25 67
STRING_CONST         : 51
SUPER                : 71
THIS                 : 41 70
TIMES                : 55
VOID                 : 9 26
WHILE                : 39
error                : 

Nonterminals, with rules where they appear

class_body           : 15
class_def            : 3
class_member         : 17 22
class_member_def     : 19
class_member_list    : 16
class_next_member    : 19
empty                : 4 14 18 23 36 76
expr                 : 38 39 40 41 42 43 44 48 52 53 53 54 54 55 55 56 56 57 58 58 59 59 60 60 61 61 62 62 63 63 64 64 65 65 66 67 69 70 71 74
expr_list            : 72 75
func_body            : 6
func_def             : 2 21
func_header          : 6
func_param           : 10 13
func_param_def       : 11
multiple_var_def     : 45 47
next_expr            : 74
next_param           : 11
param_list           : 7
program              : 1 2 3
start                : 0
statement            : 28 29 30 31 32 33 34 35 37
statement_expr       : 30
statement_id         : 35
statement_if         : 33
statement_new_scope  : 8 38 38 39
statement_return     : 31
statement_this       : 34
statement_while      : 32
var_assignment       : 29
var_def              : 20 28
var_type             : 7 12 45

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . program
    (2) program -> . func_def program
    (3) program -> . class_def program
    (4) program -> . empty
    (6) func_def -> . func_header func_body
    (15) class_def -> . CLASS ID COLON ID class_body
    (5) empty -> .
    (7) func_header -> . var_type ID LPAREN param_list RPAREN
    (24) var_type -> . INT
    (25) var_type -> . STRING
    (26) var_type -> . VOID
    (27) var_type -> . ID

    CLASS           shift and go to state 7
    $end            reduce using rule 5 (empty -> .)
    INT             shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    ID              shift and go to state 8

    start                          shift and go to state 1
    program                        shift and go to state 2
    func_def                       shift and go to state 3
    class_def                      shift and go to state 4
    empty                          shift and go to state 5
    func_header                    shift and go to state 6
    var_type                       shift and go to state 9

state 1

    (0) S' -> start .



state 2

    (1) start -> program .

    $end            reduce using rule 1 (start -> program .)


state 3

    (2) program -> func_def . program
    (2) program -> . func_def program
    (3) program -> . class_def program
    (4) program -> . empty
    (6) func_def -> . func_header func_body
    (15) class_def -> . CLASS ID COLON ID class_body
    (5) empty -> .
    (7) func_header -> . var_type ID LPAREN param_list RPAREN
    (24) var_type -> . INT
    (25) var_type -> . STRING
    (26) var_type -> . VOID
    (27) var_type -> . ID

    CLASS           shift and go to state 7
    $end            reduce using rule 5 (empty -> .)
    INT             shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    ID              shift and go to state 8

    func_def                       shift and go to state 3
    program                        shift and go to state 13
    class_def                      shift and go to state 4
    empty                          shift and go to state 5
    func_header                    shift and go to state 6
    var_type                       shift and go to state 9

state 4

    (3) program -> class_def . program
    (2) program -> . func_def program
    (3) program -> . class_def program
    (4) program -> . empty
    (6) func_def -> . func_header func_body
    (15) class_def -> . CLASS ID COLON ID class_body
    (5) empty -> .
    (7) func_header -> . var_type ID LPAREN param_list RPAREN
    (24) var_type -> . INT
    (25) var_type -> . STRING
    (26) var_type -> . VOID
    (27) var_type -> . ID

    CLASS           shift and go to state 7
    $end            reduce using rule 5 (empty -> .)
    INT             shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    ID              shift and go to state 8

    class_def                      shift and go to state 4
    program                        shift and go to state 14
    func_def                       shift and go to state 3
    empty                          shift and go to state 5
    func_header                    shift and go to state 6
    var_type                       shift and go to state 9

state 5

    (4) program -> empty .

    $end            reduce using rule 4 (program -> empty .)


state 6

    (6) func_def -> func_header . func_body
    (8) func_body -> . statement_new_scope
    (37) statement_new_scope -> . LBRACE statement RBRACE

    LBRACE          shift and go to state 17

    func_body                      shift and go to state 15
    statement_new_scope            shift and go to state 16

state 7

    (15) class_def -> CLASS . ID COLON ID class_body

    ID              shift and go to state 18


state 8

    (27) var_type -> ID .

    ID              reduce using rule 27 (var_type -> ID .)


state 9

    (7) func_header -> var_type . ID LPAREN param_list RPAREN

    ID              shift and go to state 19


state 10

    (24) var_type -> INT .

    ID              reduce using rule 24 (var_type -> INT .)


state 11

    (25) var_type -> STRING .

    ID              reduce using rule 25 (var_type -> STRING .)


state 12

    (26) var_type -> VOID .

    ID              reduce using rule 26 (var_type -> VOID .)


state 13

    (2) program -> func_def program .

    $end            reduce using rule 2 (program -> func_def program .)


state 14

    (3) program -> class_def program .

    $end            reduce using rule 3 (program -> class_def program .)


state 15

    (6) func_def -> func_header func_body .

    CLASS           reduce using rule 6 (func_def -> func_header func_body .)
    INT             reduce using rule 6 (func_def -> func_header func_body .)
    STRING          reduce using rule 6 (func_def -> func_header func_body .)
    VOID            reduce using rule 6 (func_def -> func_header func_body .)
    ID              reduce using rule 6 (func_def -> func_header func_body .)
    $end            reduce using rule 6 (func_def -> func_header func_body .)
    RBRACE          reduce using rule 6 (func_def -> func_header func_body .)


state 16

    (8) func_body -> statement_new_scope .

    CLASS           reduce using rule 8 (func_body -> statement_new_scope .)
    INT             reduce using rule 8 (func_body -> statement_new_scope .)
    STRING          reduce using rule 8 (func_body -> statement_new_scope .)
    VOID            reduce using rule 8 (func_body -> statement_new_scope .)
    ID              reduce using rule 8 (func_body -> statement_new_scope .)
    $end            reduce using rule 8 (func_body -> statement_new_scope .)
    RBRACE          reduce using rule 8 (func_body -> statement_new_scope .)


state 17

    (37) statement_new_scope -> LBRACE . statement RBRACE
    (28) statement -> . var_def statement
    (29) statement -> . var_assignment statement
    (30) statement -> . statement_expr statement
    (31) statement -> . statement_return statement
    (32) statement -> . statement_while statement
    (33) statement -> . statement_if statement
    (34) statement -> . statement_this statement
    (35) statement -> . statement_id statement
    (36) statement -> . empty
    (45) var_def -> . var_type ID multiple_var_def
    (44) var_assignment -> . ID EQUALS expr SEMI
    (43) statement_expr -> . expr SEMI
    (40) statement_return -> . RETURN expr SEMI
    (39) statement_while -> . WHILE LPAREN expr RPAREN statement_new_scope
    (38) statement_if -> . IF LPAREN expr RPAREN statement_new_scope ELSE statement_new_scope
    (41) statement_this -> . THIS PERIOD ID EQUALS expr SEMI
    (42) statement_id -> . ID PERIOD ID EQUALS expr SEMI
    (5) empty -> .
    (24) var_type -> . INT
    (25) var_type -> . STRING
    (26) var_type -> . VOID
    (27) var_type -> . ID
    (48) expr -> . LPAREN expr RPAREN
    (49) expr -> . ID
    (50) expr -> . INT_CONST
    (51) expr -> . STRING_CONST
    (52) expr -> . MINUS expr
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . LNOT expr
    (58) expr -> . expr LOR expr
    (59) expr -> . expr LAND expr
    (60) expr -> . expr LT expr
    (61) expr -> . expr LE expr
    (62) expr -> . expr GE expr
    (63) expr -> . expr GT expr
    (64) expr -> . expr EQ expr
    (65) expr -> . expr NE expr
    (66) expr -> . LPAREN INT RPAREN expr
    (67) expr -> . LPAREN STRING RPAREN expr
    (68) expr -> . NEW ID
    (69) expr -> . ID PERIOD expr
    (70) expr -> . THIS PERIOD expr
    (71) expr -> . SUPER PERIOD expr
    (72) expr -> . ID LPAREN expr_list RPAREN
    (73) expr -> . ID LPAREN RPAREN

    ID              shift and go to state 31
    RETURN          shift and go to state 33
    WHILE           shift and go to state 34
    IF              shift and go to state 36
    THIS            shift and go to state 37
    RBRACE          reduce using rule 5 (empty -> .)
    INT             shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    LPAREN          shift and go to state 35
    INT_CONST       shift and go to state 38
    STRING_CONST    shift and go to state 39
    MINUS           shift and go to state 40
    LNOT            shift and go to state 41
    NEW             shift and go to state 42
    SUPER           shift and go to state 43

    statement                      shift and go to state 20
    var_def                        shift and go to state 21
    var_assignment                 shift and go to state 22
    statement_expr                 shift and go to state 23
    statement_return               shift and go to state 24
    statement_while                shift and go to state 25
    statement_if                   shift and go to state 26
    statement_this                 shift and go to state 27
    statement_id                   shift and go to state 28
    empty                          shift and go to state 29
    var_type                       shift and go to state 30
    expr                           shift and go to state 32

state 18

    (15) class_def -> CLASS ID . COLON ID class_body

    COLON           shift and go to state 44


state 19

    (7) func_header -> var_type ID . LPAREN param_list RPAREN

    LPAREN          shift and go to state 45


state 20

    (37) statement_new_scope -> LBRACE statement . RBRACE

    RBRACE          shift and go to state 46


state 21

    (28) statement -> var_def . statement
    (28) statement -> . var_def statement
    (29) statement -> . var_assignment statement
    (30) statement -> . statement_expr statement
    (31) statement -> . statement_return statement
    (32) statement -> . statement_while statement
    (33) statement -> . statement_if statement
    (34) statement -> . statement_this statement
    (35) statement -> . statement_id statement
    (36) statement -> . empty
    (45) var_def -> . var_type ID multiple_var_def
    (44) var_assignment -> . ID EQUALS expr SEMI
    (43) statement_expr -> . expr SEMI
    (40) statement_return -> . RETURN expr SEMI
    (39) statement_while -> . WHILE LPAREN expr RPAREN statement_new_scope
    (38) statement_if -> . IF LPAREN expr RPAREN statement_new_scope ELSE statement_new_scope
    (41) statement_this -> . THIS PERIOD ID EQUALS expr SEMI
    (42) statement_id -> . ID PERIOD ID EQUALS expr SEMI
    (5) empty -> .
    (24) var_type -> . INT
    (25) var_type -> . STRING
    (26) var_type -> . VOID
    (27) var_type -> . ID
    (48) expr -> . LPAREN expr RPAREN
    (49) expr -> . ID
    (50) expr -> . INT_CONST
    (51) expr -> . STRING_CONST
    (52) expr -> . MINUS expr
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . LNOT expr
    (58) expr -> . expr LOR expr
    (59) expr -> . expr LAND expr
    (60) expr -> . expr LT expr
    (61) expr -> . expr LE expr
    (62) expr -> . expr GE expr
    (63) expr -> . expr GT expr
    (64) expr -> . expr EQ expr
    (65) expr -> . expr NE expr
    (66) expr -> . LPAREN INT RPAREN expr
    (67) expr -> . LPAREN STRING RPAREN expr
    (68) expr -> . NEW ID
    (69) expr -> . ID PERIOD expr
    (70) expr -> . THIS PERIOD expr
    (71) expr -> . SUPER PERIOD expr
    (72) expr -> . ID LPAREN expr_list RPAREN
    (73) expr -> . ID LPAREN RPAREN

    ID              shift and go to state 31
    RETURN          shift and go to state 33
    WHILE           shift and go to state 34
    IF              shift and go to state 36
    THIS            shift and go to state 37
    RBRACE          reduce using rule 5 (empty -> .)
    INT             shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    LPAREN          shift and go to state 35
    INT_CONST       shift and go to state 38
    STRING_CONST    shift and go to state 39
    MINUS           shift and go to state 40
    LNOT            shift and go to state 41
    NEW             shift and go to state 42
    SUPER           shift and go to state 43

    var_def                        shift and go to state 21
    statement                      shift and go to state 47
    var_assignment                 shift and go to state 22
    statement_expr                 shift and go to state 23
    statement_return               shift and go to state 24
    statement_while                shift and go to state 25
    statement_if                   shift and go to state 26
    statement_this                 shift and go to state 27
    statement_id                   shift and go to state 28
    empty                          shift and go to state 29
    var_type                       shift and go to state 30
    expr                           shift and go to state 32

state 22

    (29) statement -> var_assignment . statement
    (28) statement -> . var_def statement
    (29) statement -> . var_assignment statement
    (30) statement -> . statement_expr statement
    (31) statement -> . statement_return statement
    (32) statement -> . statement_while statement
    (33) statement -> . statement_if statement
    (34) statement -> . statement_this statement
    (35) statement -> . statement_id statement
    (36) statement -> . empty
    (45) var_def -> . var_type ID multiple_var_def
    (44) var_assignment -> . ID EQUALS expr SEMI
    (43) statement_expr -> . expr SEMI
    (40) statement_return -> . RETURN expr SEMI
    (39) statement_while -> . WHILE LPAREN expr RPAREN statement_new_scope
    (38) statement_if -> . IF LPAREN expr RPAREN statement_new_scope ELSE statement_new_scope
    (41) statement_this -> . THIS PERIOD ID EQUALS expr SEMI
    (42) statement_id -> . ID PERIOD ID EQUALS expr SEMI
    (5) empty -> .
    (24) var_type -> . INT
    (25) var_type -> . STRING
    (26) var_type -> . VOID
    (27) var_type -> . ID
    (48) expr -> . LPAREN expr RPAREN
    (49) expr -> . ID
    (50) expr -> . INT_CONST
    (51) expr -> . STRING_CONST
    (52) expr -> . MINUS expr
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . LNOT expr
    (58) expr -> . expr LOR expr
    (59) expr -> . expr LAND expr
    (60) expr -> . expr LT expr
    (61) expr -> . expr LE expr
    (62) expr -> . expr GE expr
    (63) expr -> . expr GT expr
    (64) expr -> . expr EQ expr
    (65) expr -> . expr NE expr
    (66) expr -> . LPAREN INT RPAREN expr
    (67) expr -> . LPAREN STRING RPAREN expr
    (68) expr -> . NEW ID
    (69) expr -> . ID PERIOD expr
    (70) expr -> . THIS PERIOD expr
    (71) expr -> . SUPER PERIOD expr
    (72) expr -> . ID LPAREN expr_list RPAREN
    (73) expr -> . ID LPAREN RPAREN

    ID              shift and go to state 31
    RETURN          shift and go to state 33
    WHILE           shift and go to state 34
    IF              shift and go to state 36
    THIS            shift and go to state 37
    RBRACE          reduce using rule 5 (empty -> .)
    INT             shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    LPAREN          shift and go to state 35
    INT_CONST       shift and go to state 38
    STRING_CONST    shift and go to state 39
    MINUS           shift and go to state 40
    LNOT            shift and go to state 41
    NEW             shift and go to state 42
    SUPER           shift and go to state 43

    var_assignment                 shift and go to state 22
    statement                      shift and go to state 48
    var_def                        shift and go to state 21
    statement_expr                 shift and go to state 23
    statement_return               shift and go to state 24
    statement_while                shift and go to state 25
    statement_if                   shift and go to state 26
    statement_this                 shift and go to state 27
    statement_id                   shift and go to state 28
    empty                          shift and go to state 29
    var_type                       shift and go to state 30
    expr                           shift and go to state 32

state 23

    (30) statement -> statement_expr . statement
    (28) statement -> . var_def statement
    (29) statement -> . var_assignment statement
    (30) statement -> . statement_expr statement
    (31) statement -> . statement_return statement
    (32) statement -> . statement_while statement
    (33) statement -> . statement_if statement
    (34) statement -> . statement_this statement
    (35) statement -> . statement_id statement
    (36) statement -> . empty
    (45) var_def -> . var_type ID multiple_var_def
    (44) var_assignment -> . ID EQUALS expr SEMI
    (43) statement_expr -> . expr SEMI
    (40) statement_return -> . RETURN expr SEMI
    (39) statement_while -> . WHILE LPAREN expr RPAREN statement_new_scope
    (38) statement_if -> . IF LPAREN expr RPAREN statement_new_scope ELSE statement_new_scope
    (41) statement_this -> . THIS PERIOD ID EQUALS expr SEMI
    (42) statement_id -> . ID PERIOD ID EQUALS expr SEMI
    (5) empty -> .
    (24) var_type -> . INT
    (25) var_type -> . STRING
    (26) var_type -> . VOID
    (27) var_type -> . ID
    (48) expr -> . LPAREN expr RPAREN
    (49) expr -> . ID
    (50) expr -> . INT_CONST
    (51) expr -> . STRING_CONST
    (52) expr -> . MINUS expr
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . LNOT expr
    (58) expr -> . expr LOR expr
    (59) expr -> . expr LAND expr
    (60) expr -> . expr LT expr
    (61) expr -> . expr LE expr
    (62) expr -> . expr GE expr
    (63) expr -> . expr GT expr
    (64) expr -> . expr EQ expr
    (65) expr -> . expr NE expr
    (66) expr -> . LPAREN INT RPAREN expr
    (67) expr -> . LPAREN STRING RPAREN expr
    (68) expr -> . NEW ID
    (69) expr -> . ID PERIOD expr
    (70) expr -> . THIS PERIOD expr
    (71) expr -> . SUPER PERIOD expr
    (72) expr -> . ID LPAREN expr_list RPAREN
    (73) expr -> . ID LPAREN RPAREN

    ID              shift and go to state 31
    RETURN          shift and go to state 33
    WHILE           shift and go to state 34
    IF              shift and go to state 36
    THIS            shift and go to state 37
    RBRACE          reduce using rule 5 (empty -> .)
    INT             shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    LPAREN          shift and go to state 35
    INT_CONST       shift and go to state 38
    STRING_CONST    shift and go to state 39
    MINUS           shift and go to state 40
    LNOT            shift and go to state 41
    NEW             shift and go to state 42
    SUPER           shift and go to state 43

    statement_expr                 shift and go to state 23
    statement                      shift and go to state 49
    var_def                        shift and go to state 21
    var_assignment                 shift and go to state 22
    statement_return               shift and go to state 24
    statement_while                shift and go to state 25
    statement_if                   shift and go to state 26
    statement_this                 shift and go to state 27
    statement_id                   shift and go to state 28
    empty                          shift and go to state 29
    var_type                       shift and go to state 30
    expr                           shift and go to state 32

state 24

    (31) statement -> statement_return . statement
    (28) statement -> . var_def statement
    (29) statement -> . var_assignment statement
    (30) statement -> . statement_expr statement
    (31) statement -> . statement_return statement
    (32) statement -> . statement_while statement
    (33) statement -> . statement_if statement
    (34) statement -> . statement_this statement
    (35) statement -> . statement_id statement
    (36) statement -> . empty
    (45) var_def -> . var_type ID multiple_var_def
    (44) var_assignment -> . ID EQUALS expr SEMI
    (43) statement_expr -> . expr SEMI
    (40) statement_return -> . RETURN expr SEMI
    (39) statement_while -> . WHILE LPAREN expr RPAREN statement_new_scope
    (38) statement_if -> . IF LPAREN expr RPAREN statement_new_scope ELSE statement_new_scope
    (41) statement_this -> . THIS PERIOD ID EQUALS expr SEMI
    (42) statement_id -> . ID PERIOD ID EQUALS expr SEMI
    (5) empty -> .
    (24) var_type -> . INT
    (25) var_type -> . STRING
    (26) var_type -> . VOID
    (27) var_type -> . ID
    (48) expr -> . LPAREN expr RPAREN
    (49) expr -> . ID
    (50) expr -> . INT_CONST
    (51) expr -> . STRING_CONST
    (52) expr -> . MINUS expr
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . LNOT expr
    (58) expr -> . expr LOR expr
    (59) expr -> . expr LAND expr
    (60) expr -> . expr LT expr
    (61) expr -> . expr LE expr
    (62) expr -> . expr GE expr
    (63) expr -> . expr GT expr
    (64) expr -> . expr EQ expr
    (65) expr -> . expr NE expr
    (66) expr -> . LPAREN INT RPAREN expr
    (67) expr -> . LPAREN STRING RPAREN expr
    (68) expr -> . NEW ID
    (69) expr -> . ID PERIOD expr
    (70) expr -> . THIS PERIOD expr
    (71) expr -> . SUPER PERIOD expr
    (72) expr -> . ID LPAREN expr_list RPAREN
    (73) expr -> . ID LPAREN RPAREN

    ID              shift and go to state 31
    RETURN          shift and go to state 33
    WHILE           shift and go to state 34
    IF              shift and go to state 36
    THIS            shift and go to state 37
    RBRACE          reduce using rule 5 (empty -> .)
    INT             shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    LPAREN          shift and go to state 35
    INT_CONST       shift and go to state 38
    STRING_CONST    shift and go to state 39
    MINUS           shift and go to state 40
    LNOT            shift and go to state 41
    NEW             shift and go to state 42
    SUPER           shift and go to state 43

    statement_return               shift and go to state 24
    statement                      shift and go to state 50
    var_def                        shift and go to state 21
    var_assignment                 shift and go to state 22
    statement_expr                 shift and go to state 23
    statement_while                shift and go to state 25
    statement_if                   shift and go to state 26
    statement_this                 shift and go to state 27
    statement_id                   shift and go to state 28
    empty                          shift and go to state 29
    var_type                       shift and go to state 30
    expr                           shift and go to state 32

state 25

    (32) statement -> statement_while . statement
    (28) statement -> . var_def statement
    (29) statement -> . var_assignment statement
    (30) statement -> . statement_expr statement
    (31) statement -> . statement_return statement
    (32) statement -> . statement_while statement
    (33) statement -> . statement_if statement
    (34) statement -> . statement_this statement
    (35) statement -> . statement_id statement
    (36) statement -> . empty
    (45) var_def -> . var_type ID multiple_var_def
    (44) var_assignment -> . ID EQUALS expr SEMI
    (43) statement_expr -> . expr SEMI
    (40) statement_return -> . RETURN expr SEMI
    (39) statement_while -> . WHILE LPAREN expr RPAREN statement_new_scope
    (38) statement_if -> . IF LPAREN expr RPAREN statement_new_scope ELSE statement_new_scope
    (41) statement_this -> . THIS PERIOD ID EQUALS expr SEMI
    (42) statement_id -> . ID PERIOD ID EQUALS expr SEMI
    (5) empty -> .
    (24) var_type -> . INT
    (25) var_type -> . STRING
    (26) var_type -> . VOID
    (27) var_type -> . ID
    (48) expr -> . LPAREN expr RPAREN
    (49) expr -> . ID
    (50) expr -> . INT_CONST
    (51) expr -> . STRING_CONST
    (52) expr -> . MINUS expr
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . LNOT expr
    (58) expr -> . expr LOR expr
    (59) expr -> . expr LAND expr
    (60) expr -> . expr LT expr
    (61) expr -> . expr LE expr
    (62) expr -> . expr GE expr
    (63) expr -> . expr GT expr
    (64) expr -> . expr EQ expr
    (65) expr -> . expr NE expr
    (66) expr -> . LPAREN INT RPAREN expr
    (67) expr -> . LPAREN STRING RPAREN expr
    (68) expr -> . NEW ID
    (69) expr -> . ID PERIOD expr
    (70) expr -> . THIS PERIOD expr
    (71) expr -> . SUPER PERIOD expr
    (72) expr -> . ID LPAREN expr_list RPAREN
    (73) expr -> . ID LPAREN RPAREN

    ID              shift and go to state 31
    RETURN          shift and go to state 33
    WHILE           shift and go to state 34
    IF              shift and go to state 36
    THIS            shift and go to state 37
    RBRACE          reduce using rule 5 (empty -> .)
    INT             shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    LPAREN          shift and go to state 35
    INT_CONST       shift and go to state 38
    STRING_CONST    shift and go to state 39
    MINUS           shift and go to state 40
    LNOT            shift and go to state 41
    NEW             shift and go to state 42
    SUPER           shift and go to state 43

    statement_while                shift and go to state 25
    statement                      shift and go to state 51
    var_def                        shift and go to state 21
    var_assignment                 shift and go to state 22
    statement_expr                 shift and go to state 23
    statement_return               shift and go to state 24
    statement_if                   shift and go to state 26
    statement_this                 shift and go to state 27
    statement_id                   shift and go to state 28
    empty                          shift and go to state 29
    var_type                       shift and go to state 30
    expr                           shift and go to state 32

state 26

    (33) statement -> statement_if . statement
    (28) statement -> . var_def statement
    (29) statement -> . var_assignment statement
    (30) statement -> . statement_expr statement
    (31) statement -> . statement_return statement
    (32) statement -> . statement_while statement
    (33) statement -> . statement_if statement
    (34) statement -> . statement_this statement
    (35) statement -> . statement_id statement
    (36) statement -> . empty
    (45) var_def -> . var_type ID multiple_var_def
    (44) var_assignment -> . ID EQUALS expr SEMI
    (43) statement_expr -> . expr SEMI
    (40) statement_return -> . RETURN expr SEMI
    (39) statement_while -> . WHILE LPAREN expr RPAREN statement_new_scope
    (38) statement_if -> . IF LPAREN expr RPAREN statement_new_scope ELSE statement_new_scope
    (41) statement_this -> . THIS PERIOD ID EQUALS expr SEMI
    (42) statement_id -> . ID PERIOD ID EQUALS expr SEMI
    (5) empty -> .
    (24) var_type -> . INT
    (25) var_type -> . STRING
    (26) var_type -> . VOID
    (27) var_type -> . ID
    (48) expr -> . LPAREN expr RPAREN
    (49) expr -> . ID
    (50) expr -> . INT_CONST
    (51) expr -> . STRING_CONST
    (52) expr -> . MINUS expr
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . LNOT expr
    (58) expr -> . expr LOR expr
    (59) expr -> . expr LAND expr
    (60) expr -> . expr LT expr
    (61) expr -> . expr LE expr
    (62) expr -> . expr GE expr
    (63) expr -> . expr GT expr
    (64) expr -> . expr EQ expr
    (65) expr -> . expr NE expr
    (66) expr -> . LPAREN INT RPAREN expr
    (67) expr -> . LPAREN STRING RPAREN expr
    (68) expr -> . NEW ID
    (69) expr -> . ID PERIOD expr
    (70) expr -> . THIS PERIOD expr
    (71) expr -> . SUPER PERIOD expr
    (72) expr -> . ID LPAREN expr_list RPAREN
    (73) expr -> . ID LPAREN RPAREN

    ID              shift and go to state 31
    RETURN          shift and go to state 33
    WHILE           shift and go to state 34
    IF              shift and go to state 36
    THIS            shift and go to state 37
    RBRACE          reduce using rule 5 (empty -> .)
    INT             shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    LPAREN          shift and go to state 35
    INT_CONST       shift and go to state 38
    STRING_CONST    shift and go to state 39
    MINUS           shift and go to state 40
    LNOT            shift and go to state 41
    NEW             shift and go to state 42
    SUPER           shift and go to state 43

    statement_if                   shift and go to state 26
    statement                      shift and go to state 52
    var_def                        shift and go to state 21
    var_assignment                 shift and go to state 22
    statement_expr                 shift and go to state 23
    statement_return               shift and go to state 24
    statement_while                shift and go to state 25
    statement_this                 shift and go to state 27
    statement_id                   shift and go to state 28
    empty                          shift and go to state 29
    var_type                       shift and go to state 30
    expr                           shift and go to state 32

state 27

    (34) statement -> statement_this . statement
    (28) statement -> . var_def statement
    (29) statement -> . var_assignment statement
    (30) statement -> . statement_expr statement
    (31) statement -> . statement_return statement
    (32) statement -> . statement_while statement
    (33) statement -> . statement_if statement
    (34) statement -> . statement_this statement
    (35) statement -> . statement_id statement
    (36) statement -> . empty
    (45) var_def -> . var_type ID multiple_var_def
    (44) var_assignment -> . ID EQUALS expr SEMI
    (43) statement_expr -> . expr SEMI
    (40) statement_return -> . RETURN expr SEMI
    (39) statement_while -> . WHILE LPAREN expr RPAREN statement_new_scope
    (38) statement_if -> . IF LPAREN expr RPAREN statement_new_scope ELSE statement_new_scope
    (41) statement_this -> . THIS PERIOD ID EQUALS expr SEMI
    (42) statement_id -> . ID PERIOD ID EQUALS expr SEMI
    (5) empty -> .
    (24) var_type -> . INT
    (25) var_type -> . STRING
    (26) var_type -> . VOID
    (27) var_type -> . ID
    (48) expr -> . LPAREN expr RPAREN
    (49) expr -> . ID
    (50) expr -> . INT_CONST
    (51) expr -> . STRING_CONST
    (52) expr -> . MINUS expr
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . LNOT expr
    (58) expr -> . expr LOR expr
    (59) expr -> . expr LAND expr
    (60) expr -> . expr LT expr
    (61) expr -> . expr LE expr
    (62) expr -> . expr GE expr
    (63) expr -> . expr GT expr
    (64) expr -> . expr EQ expr
    (65) expr -> . expr NE expr
    (66) expr -> . LPAREN INT RPAREN expr
    (67) expr -> . LPAREN STRING RPAREN expr
    (68) expr -> . NEW ID
    (69) expr -> . ID PERIOD expr
    (70) expr -> . THIS PERIOD expr
    (71) expr -> . SUPER PERIOD expr
    (72) expr -> . ID LPAREN expr_list RPAREN
    (73) expr -> . ID LPAREN RPAREN

    ID              shift and go to state 31
    RETURN          shift and go to state 33
    WHILE           shift and go to state 34
    IF              shift and go to state 36
    THIS            shift and go to state 37
    RBRACE          reduce using rule 5 (empty -> .)
    INT             shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    LPAREN          shift and go to state 35
    INT_CONST       shift and go to state 38
    STRING_CONST    shift and go to state 39
    MINUS           shift and go to state 40
    LNOT            shift and go to state 41
    NEW             shift and go to state 42
    SUPER           shift and go to state 43

    statement_this                 shift and go to state 27
    statement                      shift and go to state 53
    var_def                        shift and go to state 21
    var_assignment                 shift and go to state 22
    statement_expr                 shift and go to state 23
    statement_return               shift and go to state 24
    statement_while                shift and go to state 25
    statement_if                   shift and go to state 26
    statement_id                   shift and go to state 28
    empty                          shift and go to state 29
    var_type                       shift and go to state 30
    expr                           shift and go to state 32

state 28

    (35) statement -> statement_id . statement
    (28) statement -> . var_def statement
    (29) statement -> . var_assignment statement
    (30) statement -> . statement_expr statement
    (31) statement -> . statement_return statement
    (32) statement -> . statement_while statement
    (33) statement -> . statement_if statement
    (34) statement -> . statement_this statement
    (35) statement -> . statement_id statement
    (36) statement -> . empty
    (45) var_def -> . var_type ID multiple_var_def
    (44) var_assignment -> . ID EQUALS expr SEMI
    (43) statement_expr -> . expr SEMI
    (40) statement_return -> . RETURN expr SEMI
    (39) statement_while -> . WHILE LPAREN expr RPAREN statement_new_scope
    (38) statement_if -> . IF LPAREN expr RPAREN statement_new_scope ELSE statement_new_scope
    (41) statement_this -> . THIS PERIOD ID EQUALS expr SEMI
    (42) statement_id -> . ID PERIOD ID EQUALS expr SEMI
    (5) empty -> .
    (24) var_type -> . INT
    (25) var_type -> . STRING
    (26) var_type -> . VOID
    (27) var_type -> . ID
    (48) expr -> . LPAREN expr RPAREN
    (49) expr -> . ID
    (50) expr -> . INT_CONST
    (51) expr -> . STRING_CONST
    (52) expr -> . MINUS expr
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . LNOT expr
    (58) expr -> . expr LOR expr
    (59) expr -> . expr LAND expr
    (60) expr -> . expr LT expr
    (61) expr -> . expr LE expr
    (62) expr -> . expr GE expr
    (63) expr -> . expr GT expr
    (64) expr -> . expr EQ expr
    (65) expr -> . expr NE expr
    (66) expr -> . LPAREN INT RPAREN expr
    (67) expr -> . LPAREN STRING RPAREN expr
    (68) expr -> . NEW ID
    (69) expr -> . ID PERIOD expr
    (70) expr -> . THIS PERIOD expr
    (71) expr -> . SUPER PERIOD expr
    (72) expr -> . ID LPAREN expr_list RPAREN
    (73) expr -> . ID LPAREN RPAREN

    ID              shift and go to state 31
    RETURN          shift and go to state 33
    WHILE           shift and go to state 34
    IF              shift and go to state 36
    THIS            shift and go to state 37
    RBRACE          reduce using rule 5 (empty -> .)
    INT             shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    LPAREN          shift and go to state 35
    INT_CONST       shift and go to state 38
    STRING_CONST    shift and go to state 39
    MINUS           shift and go to state 40
    LNOT            shift and go to state 41
    NEW             shift and go to state 42
    SUPER           shift and go to state 43

    statement_id                   shift and go to state 28
    statement                      shift and go to state 54
    var_def                        shift and go to state 21
    var_assignment                 shift and go to state 22
    statement_expr                 shift and go to state 23
    statement_return               shift and go to state 24
    statement_while                shift and go to state 25
    statement_if                   shift and go to state 26
    statement_this                 shift and go to state 27
    empty                          shift and go to state 29
    var_type                       shift and go to state 30
    expr                           shift and go to state 32

state 29

    (36) statement -> empty .

    RBRACE          reduce using rule 36 (statement -> empty .)


state 30

    (45) var_def -> var_type . ID multiple_var_def

    ID              shift and go to state 55


state 31

    (44) var_assignment -> ID . EQUALS expr SEMI
    (42) statement_id -> ID . PERIOD ID EQUALS expr SEMI
    (27) var_type -> ID .
    (49) expr -> ID .
    (69) expr -> ID . PERIOD expr
    (72) expr -> ID . LPAREN expr_list RPAREN
    (73) expr -> ID . LPAREN RPAREN

    EQUALS          shift and go to state 56
    PERIOD          shift and go to state 57
    ID              reduce using rule 27 (var_type -> ID .)
    SEMI            reduce using rule 49 (expr -> ID .)
    PLUS            reduce using rule 49 (expr -> ID .)
    MINUS           reduce using rule 49 (expr -> ID .)
    TIMES           reduce using rule 49 (expr -> ID .)
    DIVIDE          reduce using rule 49 (expr -> ID .)
    LOR             reduce using rule 49 (expr -> ID .)
    LAND            reduce using rule 49 (expr -> ID .)
    LT              reduce using rule 49 (expr -> ID .)
    LE              reduce using rule 49 (expr -> ID .)
    GE              reduce using rule 49 (expr -> ID .)
    GT              reduce using rule 49 (expr -> ID .)
    EQ              reduce using rule 49 (expr -> ID .)
    NE              reduce using rule 49 (expr -> ID .)
    LPAREN          shift and go to state 58


state 32

    (43) statement_expr -> expr . SEMI
    (53) expr -> expr . PLUS expr
    (54) expr -> expr . MINUS expr
    (55) expr -> expr . TIMES expr
    (56) expr -> expr . DIVIDE expr
    (58) expr -> expr . LOR expr
    (59) expr -> expr . LAND expr
    (60) expr -> expr . LT expr
    (61) expr -> expr . LE expr
    (62) expr -> expr . GE expr
    (63) expr -> expr . GT expr
    (64) expr -> expr . EQ expr
    (65) expr -> expr . NE expr

    SEMI            shift and go to state 59
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63
    LOR             shift and go to state 64
    LAND            shift and go to state 65
    LT              shift and go to state 66
    LE              shift and go to state 67
    GE              shift and go to state 68
    GT              shift and go to state 69
    EQ              shift and go to state 70
    NE              shift and go to state 71


state 33

    (40) statement_return -> RETURN . expr SEMI
    (48) expr -> . LPAREN expr RPAREN
    (49) expr -> . ID
    (50) expr -> . INT_CONST
    (51) expr -> . STRING_CONST
    (52) expr -> . MINUS expr
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . LNOT expr
    (58) expr -> . expr LOR expr
    (59) expr -> . expr LAND expr
    (60) expr -> . expr LT expr
    (61) expr -> . expr LE expr
    (62) expr -> . expr GE expr
    (63) expr -> . expr GT expr
    (64) expr -> . expr EQ expr
    (65) expr -> . expr NE expr
    (66) expr -> . LPAREN INT RPAREN expr
    (67) expr -> . LPAREN STRING RPAREN expr
    (68) expr -> . NEW ID
    (69) expr -> . ID PERIOD expr
    (70) expr -> . THIS PERIOD expr
    (71) expr -> . SUPER PERIOD expr
    (72) expr -> . ID LPAREN expr_list RPAREN
    (73) expr -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 35
    ID              shift and go to state 73
    INT_CONST       shift and go to state 38
    STRING_CONST    shift and go to state 39
    MINUS           shift and go to state 40
    LNOT            shift and go to state 41
    NEW             shift and go to state 42
    THIS            shift and go to state 74
    SUPER           shift and go to state 43

    expr                           shift and go to state 72

state 34

    (39) statement_while -> WHILE . LPAREN expr RPAREN statement_new_scope

    LPAREN          shift and go to state 75


state 35

    (48) expr -> LPAREN . expr RPAREN
    (66) expr -> LPAREN . INT RPAREN expr
    (67) expr -> LPAREN . STRING RPAREN expr
    (48) expr -> . LPAREN expr RPAREN
    (49) expr -> . ID
    (50) expr -> . INT_CONST
    (51) expr -> . STRING_CONST
    (52) expr -> . MINUS expr
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . LNOT expr
    (58) expr -> . expr LOR expr
    (59) expr -> . expr LAND expr
    (60) expr -> . expr LT expr
    (61) expr -> . expr LE expr
    (62) expr -> . expr GE expr
    (63) expr -> . expr GT expr
    (64) expr -> . expr EQ expr
    (65) expr -> . expr NE expr
    (66) expr -> . LPAREN INT RPAREN expr
    (67) expr -> . LPAREN STRING RPAREN expr
    (68) expr -> . NEW ID
    (69) expr -> . ID PERIOD expr
    (70) expr -> . THIS PERIOD expr
    (71) expr -> . SUPER PERIOD expr
    (72) expr -> . ID LPAREN expr_list RPAREN
    (73) expr -> . ID LPAREN RPAREN

    INT             shift and go to state 77
    STRING          shift and go to state 78
    LPAREN          shift and go to state 35
    ID              shift and go to state 73
    INT_CONST       shift and go to state 38
    STRING_CONST    shift and go to state 39
    MINUS           shift and go to state 40
    LNOT            shift and go to state 41
    NEW             shift and go to state 42
    THIS            shift and go to state 74
    SUPER           shift and go to state 43

    expr                           shift and go to state 76

state 36

    (38) statement_if -> IF . LPAREN expr RPAREN statement_new_scope ELSE statement_new_scope

    LPAREN          shift and go to state 79


state 37

    (41) statement_this -> THIS . PERIOD ID EQUALS expr SEMI
    (70) expr -> THIS . PERIOD expr

    PERIOD          shift and go to state 80


state 38

    (50) expr -> INT_CONST .

    SEMI            reduce using rule 50 (expr -> INT_CONST .)
    PLUS            reduce using rule 50 (expr -> INT_CONST .)
    MINUS           reduce using rule 50 (expr -> INT_CONST .)
    TIMES           reduce using rule 50 (expr -> INT_CONST .)
    DIVIDE          reduce using rule 50 (expr -> INT_CONST .)
    LOR             reduce using rule 50 (expr -> INT_CONST .)
    LAND            reduce using rule 50 (expr -> INT_CONST .)
    LT              reduce using rule 50 (expr -> INT_CONST .)
    LE              reduce using rule 50 (expr -> INT_CONST .)
    GE              reduce using rule 50 (expr -> INT_CONST .)
    GT              reduce using rule 50 (expr -> INT_CONST .)
    EQ              reduce using rule 50 (expr -> INT_CONST .)
    NE              reduce using rule 50 (expr -> INT_CONST .)
    RPAREN          reduce using rule 50 (expr -> INT_CONST .)
    COMMA           reduce using rule 50 (expr -> INT_CONST .)


state 39

    (51) expr -> STRING_CONST .

    SEMI            reduce using rule 51 (expr -> STRING_CONST .)
    PLUS            reduce using rule 51 (expr -> STRING_CONST .)
    MINUS           reduce using rule 51 (expr -> STRING_CONST .)
    TIMES           reduce using rule 51 (expr -> STRING_CONST .)
    DIVIDE          reduce using rule 51 (expr -> STRING_CONST .)
    LOR             reduce using rule 51 (expr -> STRING_CONST .)
    LAND            reduce using rule 51 (expr -> STRING_CONST .)
    LT              reduce using rule 51 (expr -> STRING_CONST .)
    LE              reduce using rule 51 (expr -> STRING_CONST .)
    GE              reduce using rule 51 (expr -> STRING_CONST .)
    GT              reduce using rule 51 (expr -> STRING_CONST .)
    EQ              reduce using rule 51 (expr -> STRING_CONST .)
    NE              reduce using rule 51 (expr -> STRING_CONST .)
    RPAREN          reduce using rule 51 (expr -> STRING_CONST .)
    COMMA           reduce using rule 51 (expr -> STRING_CONST .)


state 40

    (52) expr -> MINUS . expr
    (48) expr -> . LPAREN expr RPAREN
    (49) expr -> . ID
    (50) expr -> . INT_CONST
    (51) expr -> . STRING_CONST
    (52) expr -> . MINUS expr
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . LNOT expr
    (58) expr -> . expr LOR expr
    (59) expr -> . expr LAND expr
    (60) expr -> . expr LT expr
    (61) expr -> . expr LE expr
    (62) expr -> . expr GE expr
    (63) expr -> . expr GT expr
    (64) expr -> . expr EQ expr
    (65) expr -> . expr NE expr
    (66) expr -> . LPAREN INT RPAREN expr
    (67) expr -> . LPAREN STRING RPAREN expr
    (68) expr -> . NEW ID
    (69) expr -> . ID PERIOD expr
    (70) expr -> . THIS PERIOD expr
    (71) expr -> . SUPER PERIOD expr
    (72) expr -> . ID LPAREN expr_list RPAREN
    (73) expr -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 35
    ID              shift and go to state 73
    INT_CONST       shift and go to state 38
    STRING_CONST    shift and go to state 39
    MINUS           shift and go to state 40
    LNOT            shift and go to state 41
    NEW             shift and go to state 42
    THIS            shift and go to state 74
    SUPER           shift and go to state 43

    expr                           shift and go to state 81

state 41

    (57) expr -> LNOT . expr
    (48) expr -> . LPAREN expr RPAREN
    (49) expr -> . ID
    (50) expr -> . INT_CONST
    (51) expr -> . STRING_CONST
    (52) expr -> . MINUS expr
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . LNOT expr
    (58) expr -> . expr LOR expr
    (59) expr -> . expr LAND expr
    (60) expr -> . expr LT expr
    (61) expr -> . expr LE expr
    (62) expr -> . expr GE expr
    (63) expr -> . expr GT expr
    (64) expr -> . expr EQ expr
    (65) expr -> . expr NE expr
    (66) expr -> . LPAREN INT RPAREN expr
    (67) expr -> . LPAREN STRING RPAREN expr
    (68) expr -> . NEW ID
    (69) expr -> . ID PERIOD expr
    (70) expr -> . THIS PERIOD expr
    (71) expr -> . SUPER PERIOD expr
    (72) expr -> . ID LPAREN expr_list RPAREN
    (73) expr -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 35
    ID              shift and go to state 73
    INT_CONST       shift and go to state 38
    STRING_CONST    shift and go to state 39
    MINUS           shift and go to state 40
    LNOT            shift and go to state 41
    NEW             shift and go to state 42
    THIS            shift and go to state 74
    SUPER           shift and go to state 43

    expr                           shift and go to state 82

state 42

    (68) expr -> NEW . ID

    ID              shift and go to state 83


state 43

    (71) expr -> SUPER . PERIOD expr

    PERIOD          shift and go to state 84


state 44

    (15) class_def -> CLASS ID COLON . ID class_body

    ID              shift and go to state 85


state 45

    (7) func_header -> var_type ID LPAREN . param_list RPAREN
    (9) param_list -> . VOID
    (10) param_list -> . func_param
    (11) func_param -> . func_param_def next_param
    (12) func_param_def -> . var_type ID
    (24) var_type -> . INT
    (25) var_type -> . STRING
    (26) var_type -> . VOID
    (27) var_type -> . ID

    VOID            shift and go to state 88
    INT             shift and go to state 10
    STRING          shift and go to state 11
    ID              shift and go to state 8

    var_type                       shift and go to state 86
    param_list                     shift and go to state 87
    func_param                     shift and go to state 89
    func_param_def                 shift and go to state 90

state 46

    (37) statement_new_scope -> LBRACE statement RBRACE .

    CLASS           reduce using rule 37 (statement_new_scope -> LBRACE statement RBRACE .)
    INT             reduce using rule 37 (statement_new_scope -> LBRACE statement RBRACE .)
    STRING          reduce using rule 37 (statement_new_scope -> LBRACE statement RBRACE .)
    VOID            reduce using rule 37 (statement_new_scope -> LBRACE statement RBRACE .)
    ID              reduce using rule 37 (statement_new_scope -> LBRACE statement RBRACE .)
    $end            reduce using rule 37 (statement_new_scope -> LBRACE statement RBRACE .)
    RBRACE          reduce using rule 37 (statement_new_scope -> LBRACE statement RBRACE .)
    RETURN          reduce using rule 37 (statement_new_scope -> LBRACE statement RBRACE .)
    WHILE           reduce using rule 37 (statement_new_scope -> LBRACE statement RBRACE .)
    IF              reduce using rule 37 (statement_new_scope -> LBRACE statement RBRACE .)
    THIS            reduce using rule 37 (statement_new_scope -> LBRACE statement RBRACE .)
    LPAREN          reduce using rule 37 (statement_new_scope -> LBRACE statement RBRACE .)
    INT_CONST       reduce using rule 37 (statement_new_scope -> LBRACE statement RBRACE .)
    STRING_CONST    reduce using rule 37 (statement_new_scope -> LBRACE statement RBRACE .)
    MINUS           reduce using rule 37 (statement_new_scope -> LBRACE statement RBRACE .)
    LNOT            reduce using rule 37 (statement_new_scope -> LBRACE statement RBRACE .)
    NEW             reduce using rule 37 (statement_new_scope -> LBRACE statement RBRACE .)
    SUPER           reduce using rule 37 (statement_new_scope -> LBRACE statement RBRACE .)
    ELSE            reduce using rule 37 (statement_new_scope -> LBRACE statement RBRACE .)


state 47

    (28) statement -> var_def statement .

    RBRACE          reduce using rule 28 (statement -> var_def statement .)


state 48

    (29) statement -> var_assignment statement .

    RBRACE          reduce using rule 29 (statement -> var_assignment statement .)


state 49

    (30) statement -> statement_expr statement .

    RBRACE          reduce using rule 30 (statement -> statement_expr statement .)


state 50

    (31) statement -> statement_return statement .

    RBRACE          reduce using rule 31 (statement -> statement_return statement .)


state 51

    (32) statement -> statement_while statement .

    RBRACE          reduce using rule 32 (statement -> statement_while statement .)


state 52

    (33) statement -> statement_if statement .

    RBRACE          reduce using rule 33 (statement -> statement_if statement .)


state 53

    (34) statement -> statement_this statement .

    RBRACE          reduce using rule 34 (statement -> statement_this statement .)


state 54

    (35) statement -> statement_id statement .

    RBRACE          reduce using rule 35 (statement -> statement_id statement .)


state 55

    (45) var_def -> var_type ID . multiple_var_def
    (46) multiple_var_def -> . SEMI
    (47) multiple_var_def -> . COMMA ID multiple_var_def

    SEMI            shift and go to state 92
    COMMA           shift and go to state 93

    multiple_var_def               shift and go to state 91

state 56

    (44) var_assignment -> ID EQUALS . expr SEMI
    (48) expr -> . LPAREN expr RPAREN
    (49) expr -> . ID
    (50) expr -> . INT_CONST
    (51) expr -> . STRING_CONST
    (52) expr -> . MINUS expr
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . LNOT expr
    (58) expr -> . expr LOR expr
    (59) expr -> . expr LAND expr
    (60) expr -> . expr LT expr
    (61) expr -> . expr LE expr
    (62) expr -> . expr GE expr
    (63) expr -> . expr GT expr
    (64) expr -> . expr EQ expr
    (65) expr -> . expr NE expr
    (66) expr -> . LPAREN INT RPAREN expr
    (67) expr -> . LPAREN STRING RPAREN expr
    (68) expr -> . NEW ID
    (69) expr -> . ID PERIOD expr
    (70) expr -> . THIS PERIOD expr
    (71) expr -> . SUPER PERIOD expr
    (72) expr -> . ID LPAREN expr_list RPAREN
    (73) expr -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 35
    ID              shift and go to state 73
    INT_CONST       shift and go to state 38
    STRING_CONST    shift and go to state 39
    MINUS           shift and go to state 40
    LNOT            shift and go to state 41
    NEW             shift and go to state 42
    THIS            shift and go to state 74
    SUPER           shift and go to state 43

    expr                           shift and go to state 94

state 57

    (42) statement_id -> ID PERIOD . ID EQUALS expr SEMI
    (69) expr -> ID PERIOD . expr
    (48) expr -> . LPAREN expr RPAREN
    (49) expr -> . ID
    (50) expr -> . INT_CONST
    (51) expr -> . STRING_CONST
    (52) expr -> . MINUS expr
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . LNOT expr
    (58) expr -> . expr LOR expr
    (59) expr -> . expr LAND expr
    (60) expr -> . expr LT expr
    (61) expr -> . expr LE expr
    (62) expr -> . expr GE expr
    (63) expr -> . expr GT expr
    (64) expr -> . expr EQ expr
    (65) expr -> . expr NE expr
    (66) expr -> . LPAREN INT RPAREN expr
    (67) expr -> . LPAREN STRING RPAREN expr
    (68) expr -> . NEW ID
    (69) expr -> . ID PERIOD expr
    (70) expr -> . THIS PERIOD expr
    (71) expr -> . SUPER PERIOD expr
    (72) expr -> . ID LPAREN expr_list RPAREN
    (73) expr -> . ID LPAREN RPAREN

    ID              shift and go to state 95
    LPAREN          shift and go to state 35
    INT_CONST       shift and go to state 38
    STRING_CONST    shift and go to state 39
    MINUS           shift and go to state 40
    LNOT            shift and go to state 41
    NEW             shift and go to state 42
    THIS            shift and go to state 74
    SUPER           shift and go to state 43

    expr                           shift and go to state 96

state 58

    (72) expr -> ID LPAREN . expr_list RPAREN
    (73) expr -> ID LPAREN . RPAREN
    (74) expr_list -> . expr next_expr
    (48) expr -> . LPAREN expr RPAREN
    (49) expr -> . ID
    (50) expr -> . INT_CONST
    (51) expr -> . STRING_CONST
    (52) expr -> . MINUS expr
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . LNOT expr
    (58) expr -> . expr LOR expr
    (59) expr -> . expr LAND expr
    (60) expr -> . expr LT expr
    (61) expr -> . expr LE expr
    (62) expr -> . expr GE expr
    (63) expr -> . expr GT expr
    (64) expr -> . expr EQ expr
    (65) expr -> . expr NE expr
    (66) expr -> . LPAREN INT RPAREN expr
    (67) expr -> . LPAREN STRING RPAREN expr
    (68) expr -> . NEW ID
    (69) expr -> . ID PERIOD expr
    (70) expr -> . THIS PERIOD expr
    (71) expr -> . SUPER PERIOD expr
    (72) expr -> . ID LPAREN expr_list RPAREN
    (73) expr -> . ID LPAREN RPAREN

    RPAREN          shift and go to state 98
    LPAREN          shift and go to state 35
    ID              shift and go to state 73
    INT_CONST       shift and go to state 38
    STRING_CONST    shift and go to state 39
    MINUS           shift and go to state 40
    LNOT            shift and go to state 41
    NEW             shift and go to state 42
    THIS            shift and go to state 74
    SUPER           shift and go to state 43

    expr_list                      shift and go to state 97
    expr                           shift and go to state 99

state 59

    (43) statement_expr -> expr SEMI .

    ID              reduce using rule 43 (statement_expr -> expr SEMI .)
    RETURN          reduce using rule 43 (statement_expr -> expr SEMI .)
    WHILE           reduce using rule 43 (statement_expr -> expr SEMI .)
    IF              reduce using rule 43 (statement_expr -> expr SEMI .)
    THIS            reduce using rule 43 (statement_expr -> expr SEMI .)
    INT             reduce using rule 43 (statement_expr -> expr SEMI .)
    STRING          reduce using rule 43 (statement_expr -> expr SEMI .)
    VOID            reduce using rule 43 (statement_expr -> expr SEMI .)
    LPAREN          reduce using rule 43 (statement_expr -> expr SEMI .)
    INT_CONST       reduce using rule 43 (statement_expr -> expr SEMI .)
    STRING_CONST    reduce using rule 43 (statement_expr -> expr SEMI .)
    MINUS           reduce using rule 43 (statement_expr -> expr SEMI .)
    LNOT            reduce using rule 43 (statement_expr -> expr SEMI .)
    NEW             reduce using rule 43 (statement_expr -> expr SEMI .)
    SUPER           reduce using rule 43 (statement_expr -> expr SEMI .)
    RBRACE          reduce using rule 43 (statement_expr -> expr SEMI .)


state 60

    (53) expr -> expr PLUS . expr
    (48) expr -> . LPAREN expr RPAREN
    (49) expr -> . ID
    (50) expr -> . INT_CONST
    (51) expr -> . STRING_CONST
    (52) expr -> . MINUS expr
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . LNOT expr
    (58) expr -> . expr LOR expr
    (59) expr -> . expr LAND expr
    (60) expr -> . expr LT expr
    (61) expr -> . expr LE expr
    (62) expr -> . expr GE expr
    (63) expr -> . expr GT expr
    (64) expr -> . expr EQ expr
    (65) expr -> . expr NE expr
    (66) expr -> . LPAREN INT RPAREN expr
    (67) expr -> . LPAREN STRING RPAREN expr
    (68) expr -> . NEW ID
    (69) expr -> . ID PERIOD expr
    (70) expr -> . THIS PERIOD expr
    (71) expr -> . SUPER PERIOD expr
    (72) expr -> . ID LPAREN expr_list RPAREN
    (73) expr -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 35
    ID              shift and go to state 73
    INT_CONST       shift and go to state 38
    STRING_CONST    shift and go to state 39
    MINUS           shift and go to state 40
    LNOT            shift and go to state 41
    NEW             shift and go to state 42
    THIS            shift and go to state 74
    SUPER           shift and go to state 43

    expr                           shift and go to state 100

state 61

    (54) expr -> expr MINUS . expr
    (48) expr -> . LPAREN expr RPAREN
    (49) expr -> . ID
    (50) expr -> . INT_CONST
    (51) expr -> . STRING_CONST
    (52) expr -> . MINUS expr
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . LNOT expr
    (58) expr -> . expr LOR expr
    (59) expr -> . expr LAND expr
    (60) expr -> . expr LT expr
    (61) expr -> . expr LE expr
    (62) expr -> . expr GE expr
    (63) expr -> . expr GT expr
    (64) expr -> . expr EQ expr
    (65) expr -> . expr NE expr
    (66) expr -> . LPAREN INT RPAREN expr
    (67) expr -> . LPAREN STRING RPAREN expr
    (68) expr -> . NEW ID
    (69) expr -> . ID PERIOD expr
    (70) expr -> . THIS PERIOD expr
    (71) expr -> . SUPER PERIOD expr
    (72) expr -> . ID LPAREN expr_list RPAREN
    (73) expr -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 35
    ID              shift and go to state 73
    INT_CONST       shift and go to state 38
    STRING_CONST    shift and go to state 39
    MINUS           shift and go to state 40
    LNOT            shift and go to state 41
    NEW             shift and go to state 42
    THIS            shift and go to state 74
    SUPER           shift and go to state 43

    expr                           shift and go to state 101

state 62

    (55) expr -> expr TIMES . expr
    (48) expr -> . LPAREN expr RPAREN
    (49) expr -> . ID
    (50) expr -> . INT_CONST
    (51) expr -> . STRING_CONST
    (52) expr -> . MINUS expr
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . LNOT expr
    (58) expr -> . expr LOR expr
    (59) expr -> . expr LAND expr
    (60) expr -> . expr LT expr
    (61) expr -> . expr LE expr
    (62) expr -> . expr GE expr
    (63) expr -> . expr GT expr
    (64) expr -> . expr EQ expr
    (65) expr -> . expr NE expr
    (66) expr -> . LPAREN INT RPAREN expr
    (67) expr -> . LPAREN STRING RPAREN expr
    (68) expr -> . NEW ID
    (69) expr -> . ID PERIOD expr
    (70) expr -> . THIS PERIOD expr
    (71) expr -> . SUPER PERIOD expr
    (72) expr -> . ID LPAREN expr_list RPAREN
    (73) expr -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 35
    ID              shift and go to state 73
    INT_CONST       shift and go to state 38
    STRING_CONST    shift and go to state 39
    MINUS           shift and go to state 40
    LNOT            shift and go to state 41
    NEW             shift and go to state 42
    THIS            shift and go to state 74
    SUPER           shift and go to state 43

    expr                           shift and go to state 102

state 63

    (56) expr -> expr DIVIDE . expr
    (48) expr -> . LPAREN expr RPAREN
    (49) expr -> . ID
    (50) expr -> . INT_CONST
    (51) expr -> . STRING_CONST
    (52) expr -> . MINUS expr
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . LNOT expr
    (58) expr -> . expr LOR expr
    (59) expr -> . expr LAND expr
    (60) expr -> . expr LT expr
    (61) expr -> . expr LE expr
    (62) expr -> . expr GE expr
    (63) expr -> . expr GT expr
    (64) expr -> . expr EQ expr
    (65) expr -> . expr NE expr
    (66) expr -> . LPAREN INT RPAREN expr
    (67) expr -> . LPAREN STRING RPAREN expr
    (68) expr -> . NEW ID
    (69) expr -> . ID PERIOD expr
    (70) expr -> . THIS PERIOD expr
    (71) expr -> . SUPER PERIOD expr
    (72) expr -> . ID LPAREN expr_list RPAREN
    (73) expr -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 35
    ID              shift and go to state 73
    INT_CONST       shift and go to state 38
    STRING_CONST    shift and go to state 39
    MINUS           shift and go to state 40
    LNOT            shift and go to state 41
    NEW             shift and go to state 42
    THIS            shift and go to state 74
    SUPER           shift and go to state 43

    expr                           shift and go to state 103

state 64

    (58) expr -> expr LOR . expr
    (48) expr -> . LPAREN expr RPAREN
    (49) expr -> . ID
    (50) expr -> . INT_CONST
    (51) expr -> . STRING_CONST
    (52) expr -> . MINUS expr
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . LNOT expr
    (58) expr -> . expr LOR expr
    (59) expr -> . expr LAND expr
    (60) expr -> . expr LT expr
    (61) expr -> . expr LE expr
    (62) expr -> . expr GE expr
    (63) expr -> . expr GT expr
    (64) expr -> . expr EQ expr
    (65) expr -> . expr NE expr
    (66) expr -> . LPAREN INT RPAREN expr
    (67) expr -> . LPAREN STRING RPAREN expr
    (68) expr -> . NEW ID
    (69) expr -> . ID PERIOD expr
    (70) expr -> . THIS PERIOD expr
    (71) expr -> . SUPER PERIOD expr
    (72) expr -> . ID LPAREN expr_list RPAREN
    (73) expr -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 35
    ID              shift and go to state 73
    INT_CONST       shift and go to state 38
    STRING_CONST    shift and go to state 39
    MINUS           shift and go to state 40
    LNOT            shift and go to state 41
    NEW             shift and go to state 42
    THIS            shift and go to state 74
    SUPER           shift and go to state 43

    expr                           shift and go to state 104

state 65

    (59) expr -> expr LAND . expr
    (48) expr -> . LPAREN expr RPAREN
    (49) expr -> . ID
    (50) expr -> . INT_CONST
    (51) expr -> . STRING_CONST
    (52) expr -> . MINUS expr
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . LNOT expr
    (58) expr -> . expr LOR expr
    (59) expr -> . expr LAND expr
    (60) expr -> . expr LT expr
    (61) expr -> . expr LE expr
    (62) expr -> . expr GE expr
    (63) expr -> . expr GT expr
    (64) expr -> . expr EQ expr
    (65) expr -> . expr NE expr
    (66) expr -> . LPAREN INT RPAREN expr
    (67) expr -> . LPAREN STRING RPAREN expr
    (68) expr -> . NEW ID
    (69) expr -> . ID PERIOD expr
    (70) expr -> . THIS PERIOD expr
    (71) expr -> . SUPER PERIOD expr
    (72) expr -> . ID LPAREN expr_list RPAREN
    (73) expr -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 35
    ID              shift and go to state 73
    INT_CONST       shift and go to state 38
    STRING_CONST    shift and go to state 39
    MINUS           shift and go to state 40
    LNOT            shift and go to state 41
    NEW             shift and go to state 42
    THIS            shift and go to state 74
    SUPER           shift and go to state 43

    expr                           shift and go to state 105

state 66

    (60) expr -> expr LT . expr
    (48) expr -> . LPAREN expr RPAREN
    (49) expr -> . ID
    (50) expr -> . INT_CONST
    (51) expr -> . STRING_CONST
    (52) expr -> . MINUS expr
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . LNOT expr
    (58) expr -> . expr LOR expr
    (59) expr -> . expr LAND expr
    (60) expr -> . expr LT expr
    (61) expr -> . expr LE expr
    (62) expr -> . expr GE expr
    (63) expr -> . expr GT expr
    (64) expr -> . expr EQ expr
    (65) expr -> . expr NE expr
    (66) expr -> . LPAREN INT RPAREN expr
    (67) expr -> . LPAREN STRING RPAREN expr
    (68) expr -> . NEW ID
    (69) expr -> . ID PERIOD expr
    (70) expr -> . THIS PERIOD expr
    (71) expr -> . SUPER PERIOD expr
    (72) expr -> . ID LPAREN expr_list RPAREN
    (73) expr -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 35
    ID              shift and go to state 73
    INT_CONST       shift and go to state 38
    STRING_CONST    shift and go to state 39
    MINUS           shift and go to state 40
    LNOT            shift and go to state 41
    NEW             shift and go to state 42
    THIS            shift and go to state 74
    SUPER           shift and go to state 43

    expr                           shift and go to state 106

state 67

    (61) expr -> expr LE . expr
    (48) expr -> . LPAREN expr RPAREN
    (49) expr -> . ID
    (50) expr -> . INT_CONST
    (51) expr -> . STRING_CONST
    (52) expr -> . MINUS expr
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . LNOT expr
    (58) expr -> . expr LOR expr
    (59) expr -> . expr LAND expr
    (60) expr -> . expr LT expr
    (61) expr -> . expr LE expr
    (62) expr -> . expr GE expr
    (63) expr -> . expr GT expr
    (64) expr -> . expr EQ expr
    (65) expr -> . expr NE expr
    (66) expr -> . LPAREN INT RPAREN expr
    (67) expr -> . LPAREN STRING RPAREN expr
    (68) expr -> . NEW ID
    (69) expr -> . ID PERIOD expr
    (70) expr -> . THIS PERIOD expr
    (71) expr -> . SUPER PERIOD expr
    (72) expr -> . ID LPAREN expr_list RPAREN
    (73) expr -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 35
    ID              shift and go to state 73
    INT_CONST       shift and go to state 38
    STRING_CONST    shift and go to state 39
    MINUS           shift and go to state 40
    LNOT            shift and go to state 41
    NEW             shift and go to state 42
    THIS            shift and go to state 74
    SUPER           shift and go to state 43

    expr                           shift and go to state 107

state 68

    (62) expr -> expr GE . expr
    (48) expr -> . LPAREN expr RPAREN
    (49) expr -> . ID
    (50) expr -> . INT_CONST
    (51) expr -> . STRING_CONST
    (52) expr -> . MINUS expr
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . LNOT expr
    (58) expr -> . expr LOR expr
    (59) expr -> . expr LAND expr
    (60) expr -> . expr LT expr
    (61) expr -> . expr LE expr
    (62) expr -> . expr GE expr
    (63) expr -> . expr GT expr
    (64) expr -> . expr EQ expr
    (65) expr -> . expr NE expr
    (66) expr -> . LPAREN INT RPAREN expr
    (67) expr -> . LPAREN STRING RPAREN expr
    (68) expr -> . NEW ID
    (69) expr -> . ID PERIOD expr
    (70) expr -> . THIS PERIOD expr
    (71) expr -> . SUPER PERIOD expr
    (72) expr -> . ID LPAREN expr_list RPAREN
    (73) expr -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 35
    ID              shift and go to state 73
    INT_CONST       shift and go to state 38
    STRING_CONST    shift and go to state 39
    MINUS           shift and go to state 40
    LNOT            shift and go to state 41
    NEW             shift and go to state 42
    THIS            shift and go to state 74
    SUPER           shift and go to state 43

    expr                           shift and go to state 108

state 69

    (63) expr -> expr GT . expr
    (48) expr -> . LPAREN expr RPAREN
    (49) expr -> . ID
    (50) expr -> . INT_CONST
    (51) expr -> . STRING_CONST
    (52) expr -> . MINUS expr
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . LNOT expr
    (58) expr -> . expr LOR expr
    (59) expr -> . expr LAND expr
    (60) expr -> . expr LT expr
    (61) expr -> . expr LE expr
    (62) expr -> . expr GE expr
    (63) expr -> . expr GT expr
    (64) expr -> . expr EQ expr
    (65) expr -> . expr NE expr
    (66) expr -> . LPAREN INT RPAREN expr
    (67) expr -> . LPAREN STRING RPAREN expr
    (68) expr -> . NEW ID
    (69) expr -> . ID PERIOD expr
    (70) expr -> . THIS PERIOD expr
    (71) expr -> . SUPER PERIOD expr
    (72) expr -> . ID LPAREN expr_list RPAREN
    (73) expr -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 35
    ID              shift and go to state 73
    INT_CONST       shift and go to state 38
    STRING_CONST    shift and go to state 39
    MINUS           shift and go to state 40
    LNOT            shift and go to state 41
    NEW             shift and go to state 42
    THIS            shift and go to state 74
    SUPER           shift and go to state 43

    expr                           shift and go to state 109

state 70

    (64) expr -> expr EQ . expr
    (48) expr -> . LPAREN expr RPAREN
    (49) expr -> . ID
    (50) expr -> . INT_CONST
    (51) expr -> . STRING_CONST
    (52) expr -> . MINUS expr
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . LNOT expr
    (58) expr -> . expr LOR expr
    (59) expr -> . expr LAND expr
    (60) expr -> . expr LT expr
    (61) expr -> . expr LE expr
    (62) expr -> . expr GE expr
    (63) expr -> . expr GT expr
    (64) expr -> . expr EQ expr
    (65) expr -> . expr NE expr
    (66) expr -> . LPAREN INT RPAREN expr
    (67) expr -> . LPAREN STRING RPAREN expr
    (68) expr -> . NEW ID
    (69) expr -> . ID PERIOD expr
    (70) expr -> . THIS PERIOD expr
    (71) expr -> . SUPER PERIOD expr
    (72) expr -> . ID LPAREN expr_list RPAREN
    (73) expr -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 35
    ID              shift and go to state 73
    INT_CONST       shift and go to state 38
    STRING_CONST    shift and go to state 39
    MINUS           shift and go to state 40
    LNOT            shift and go to state 41
    NEW             shift and go to state 42
    THIS            shift and go to state 74
    SUPER           shift and go to state 43

    expr                           shift and go to state 110

state 71

    (65) expr -> expr NE . expr
    (48) expr -> . LPAREN expr RPAREN
    (49) expr -> . ID
    (50) expr -> . INT_CONST
    (51) expr -> . STRING_CONST
    (52) expr -> . MINUS expr
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . LNOT expr
    (58) expr -> . expr LOR expr
    (59) expr -> . expr LAND expr
    (60) expr -> . expr LT expr
    (61) expr -> . expr LE expr
    (62) expr -> . expr GE expr
    (63) expr -> . expr GT expr
    (64) expr -> . expr EQ expr
    (65) expr -> . expr NE expr
    (66) expr -> . LPAREN INT RPAREN expr
    (67) expr -> . LPAREN STRING RPAREN expr
    (68) expr -> . NEW ID
    (69) expr -> . ID PERIOD expr
    (70) expr -> . THIS PERIOD expr
    (71) expr -> . SUPER PERIOD expr
    (72) expr -> . ID LPAREN expr_list RPAREN
    (73) expr -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 35
    ID              shift and go to state 73
    INT_CONST       shift and go to state 38
    STRING_CONST    shift and go to state 39
    MINUS           shift and go to state 40
    LNOT            shift and go to state 41
    NEW             shift and go to state 42
    THIS            shift and go to state 74
    SUPER           shift and go to state 43

    expr                           shift and go to state 111

state 72

    (40) statement_return -> RETURN expr . SEMI
    (53) expr -> expr . PLUS expr
    (54) expr -> expr . MINUS expr
    (55) expr -> expr . TIMES expr
    (56) expr -> expr . DIVIDE expr
    (58) expr -> expr . LOR expr
    (59) expr -> expr . LAND expr
    (60) expr -> expr . LT expr
    (61) expr -> expr . LE expr
    (62) expr -> expr . GE expr
    (63) expr -> expr . GT expr
    (64) expr -> expr . EQ expr
    (65) expr -> expr . NE expr

    SEMI            shift and go to state 112
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63
    LOR             shift and go to state 64
    LAND            shift and go to state 65
    LT              shift and go to state 66
    LE              shift and go to state 67
    GE              shift and go to state 68
    GT              shift and go to state 69
    EQ              shift and go to state 70
    NE              shift and go to state 71


state 73

    (49) expr -> ID .
    (69) expr -> ID . PERIOD expr
    (72) expr -> ID . LPAREN expr_list RPAREN
    (73) expr -> ID . LPAREN RPAREN

    SEMI            reduce using rule 49 (expr -> ID .)
    PLUS            reduce using rule 49 (expr -> ID .)
    MINUS           reduce using rule 49 (expr -> ID .)
    TIMES           reduce using rule 49 (expr -> ID .)
    DIVIDE          reduce using rule 49 (expr -> ID .)
    LOR             reduce using rule 49 (expr -> ID .)
    LAND            reduce using rule 49 (expr -> ID .)
    LT              reduce using rule 49 (expr -> ID .)
    LE              reduce using rule 49 (expr -> ID .)
    GE              reduce using rule 49 (expr -> ID .)
    GT              reduce using rule 49 (expr -> ID .)
    EQ              reduce using rule 49 (expr -> ID .)
    NE              reduce using rule 49 (expr -> ID .)
    RPAREN          reduce using rule 49 (expr -> ID .)
    COMMA           reduce using rule 49 (expr -> ID .)
    PERIOD          shift and go to state 113
    LPAREN          shift and go to state 58


state 74

    (70) expr -> THIS . PERIOD expr

    PERIOD          shift and go to state 114


state 75

    (39) statement_while -> WHILE LPAREN . expr RPAREN statement_new_scope
    (48) expr -> . LPAREN expr RPAREN
    (49) expr -> . ID
    (50) expr -> . INT_CONST
    (51) expr -> . STRING_CONST
    (52) expr -> . MINUS expr
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . LNOT expr
    (58) expr -> . expr LOR expr
    (59) expr -> . expr LAND expr
    (60) expr -> . expr LT expr
    (61) expr -> . expr LE expr
    (62) expr -> . expr GE expr
    (63) expr -> . expr GT expr
    (64) expr -> . expr EQ expr
    (65) expr -> . expr NE expr
    (66) expr -> . LPAREN INT RPAREN expr
    (67) expr -> . LPAREN STRING RPAREN expr
    (68) expr -> . NEW ID
    (69) expr -> . ID PERIOD expr
    (70) expr -> . THIS PERIOD expr
    (71) expr -> . SUPER PERIOD expr
    (72) expr -> . ID LPAREN expr_list RPAREN
    (73) expr -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 35
    ID              shift and go to state 73
    INT_CONST       shift and go to state 38
    STRING_CONST    shift and go to state 39
    MINUS           shift and go to state 40
    LNOT            shift and go to state 41
    NEW             shift and go to state 42
    THIS            shift and go to state 74
    SUPER           shift and go to state 43

    expr                           shift and go to state 115

state 76

    (48) expr -> LPAREN expr . RPAREN
    (53) expr -> expr . PLUS expr
    (54) expr -> expr . MINUS expr
    (55) expr -> expr . TIMES expr
    (56) expr -> expr . DIVIDE expr
    (58) expr -> expr . LOR expr
    (59) expr -> expr . LAND expr
    (60) expr -> expr . LT expr
    (61) expr -> expr . LE expr
    (62) expr -> expr . GE expr
    (63) expr -> expr . GT expr
    (64) expr -> expr . EQ expr
    (65) expr -> expr . NE expr

    RPAREN          shift and go to state 116
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63
    LOR             shift and go to state 64
    LAND            shift and go to state 65
    LT              shift and go to state 66
    LE              shift and go to state 67
    GE              shift and go to state 68
    GT              shift and go to state 69
    EQ              shift and go to state 70
    NE              shift and go to state 71


state 77

    (66) expr -> LPAREN INT . RPAREN expr

    RPAREN          shift and go to state 117


state 78

    (67) expr -> LPAREN STRING . RPAREN expr

    RPAREN          shift and go to state 118


state 79

    (38) statement_if -> IF LPAREN . expr RPAREN statement_new_scope ELSE statement_new_scope
    (48) expr -> . LPAREN expr RPAREN
    (49) expr -> . ID
    (50) expr -> . INT_CONST
    (51) expr -> . STRING_CONST
    (52) expr -> . MINUS expr
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . LNOT expr
    (58) expr -> . expr LOR expr
    (59) expr -> . expr LAND expr
    (60) expr -> . expr LT expr
    (61) expr -> . expr LE expr
    (62) expr -> . expr GE expr
    (63) expr -> . expr GT expr
    (64) expr -> . expr EQ expr
    (65) expr -> . expr NE expr
    (66) expr -> . LPAREN INT RPAREN expr
    (67) expr -> . LPAREN STRING RPAREN expr
    (68) expr -> . NEW ID
    (69) expr -> . ID PERIOD expr
    (70) expr -> . THIS PERIOD expr
    (71) expr -> . SUPER PERIOD expr
    (72) expr -> . ID LPAREN expr_list RPAREN
    (73) expr -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 35
    ID              shift and go to state 73
    INT_CONST       shift and go to state 38
    STRING_CONST    shift and go to state 39
    MINUS           shift and go to state 40
    LNOT            shift and go to state 41
    NEW             shift and go to state 42
    THIS            shift and go to state 74
    SUPER           shift and go to state 43

    expr                           shift and go to state 119

state 80

    (41) statement_this -> THIS PERIOD . ID EQUALS expr SEMI
    (70) expr -> THIS PERIOD . expr
    (48) expr -> . LPAREN expr RPAREN
    (49) expr -> . ID
    (50) expr -> . INT_CONST
    (51) expr -> . STRING_CONST
    (52) expr -> . MINUS expr
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . LNOT expr
    (58) expr -> . expr LOR expr
    (59) expr -> . expr LAND expr
    (60) expr -> . expr LT expr
    (61) expr -> . expr LE expr
    (62) expr -> . expr GE expr
    (63) expr -> . expr GT expr
    (64) expr -> . expr EQ expr
    (65) expr -> . expr NE expr
    (66) expr -> . LPAREN INT RPAREN expr
    (67) expr -> . LPAREN STRING RPAREN expr
    (68) expr -> . NEW ID
    (69) expr -> . ID PERIOD expr
    (70) expr -> . THIS PERIOD expr
    (71) expr -> . SUPER PERIOD expr
    (72) expr -> . ID LPAREN expr_list RPAREN
    (73) expr -> . ID LPAREN RPAREN

    ID              shift and go to state 120
    LPAREN          shift and go to state 35
    INT_CONST       shift and go to state 38
    STRING_CONST    shift and go to state 39
    MINUS           shift and go to state 40
    LNOT            shift and go to state 41
    NEW             shift and go to state 42
    THIS            shift and go to state 74
    SUPER           shift and go to state 43

    expr                           shift and go to state 121

state 81

    (52) expr -> MINUS expr .
    (53) expr -> expr . PLUS expr
    (54) expr -> expr . MINUS expr
    (55) expr -> expr . TIMES expr
    (56) expr -> expr . DIVIDE expr
    (58) expr -> expr . LOR expr
    (59) expr -> expr . LAND expr
    (60) expr -> expr . LT expr
    (61) expr -> expr . LE expr
    (62) expr -> expr . GE expr
    (63) expr -> expr . GT expr
    (64) expr -> expr . EQ expr
    (65) expr -> expr . NE expr

    SEMI            reduce using rule 52 (expr -> MINUS expr .)
    PLUS            reduce using rule 52 (expr -> MINUS expr .)
    MINUS           reduce using rule 52 (expr -> MINUS expr .)
    LOR             reduce using rule 52 (expr -> MINUS expr .)
    LAND            reduce using rule 52 (expr -> MINUS expr .)
    LT              reduce using rule 52 (expr -> MINUS expr .)
    LE              reduce using rule 52 (expr -> MINUS expr .)
    GE              reduce using rule 52 (expr -> MINUS expr .)
    GT              reduce using rule 52 (expr -> MINUS expr .)
    EQ              reduce using rule 52 (expr -> MINUS expr .)
    NE              reduce using rule 52 (expr -> MINUS expr .)
    RPAREN          reduce using rule 52 (expr -> MINUS expr .)
    COMMA           reduce using rule 52 (expr -> MINUS expr .)
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63

  ! TIMES           [ reduce using rule 52 (expr -> MINUS expr .) ]
  ! DIVIDE          [ reduce using rule 52 (expr -> MINUS expr .) ]
  ! PLUS            [ shift and go to state 60 ]
  ! MINUS           [ shift and go to state 61 ]
  ! LOR             [ shift and go to state 64 ]
  ! LAND            [ shift and go to state 65 ]
  ! LT              [ shift and go to state 66 ]
  ! LE              [ shift and go to state 67 ]
  ! GE              [ shift and go to state 68 ]
  ! GT              [ shift and go to state 69 ]
  ! EQ              [ shift and go to state 70 ]
  ! NE              [ shift and go to state 71 ]


state 82

    (57) expr -> LNOT expr .
    (53) expr -> expr . PLUS expr
    (54) expr -> expr . MINUS expr
    (55) expr -> expr . TIMES expr
    (56) expr -> expr . DIVIDE expr
    (58) expr -> expr . LOR expr
    (59) expr -> expr . LAND expr
    (60) expr -> expr . LT expr
    (61) expr -> expr . LE expr
    (62) expr -> expr . GE expr
    (63) expr -> expr . GT expr
    (64) expr -> expr . EQ expr
    (65) expr -> expr . NE expr

    SEMI            reduce using rule 57 (expr -> LNOT expr .)
    PLUS            reduce using rule 57 (expr -> LNOT expr .)
    MINUS           reduce using rule 57 (expr -> LNOT expr .)
    TIMES           reduce using rule 57 (expr -> LNOT expr .)
    DIVIDE          reduce using rule 57 (expr -> LNOT expr .)
    LOR             reduce using rule 57 (expr -> LNOT expr .)
    LAND            reduce using rule 57 (expr -> LNOT expr .)
    LT              reduce using rule 57 (expr -> LNOT expr .)
    LE              reduce using rule 57 (expr -> LNOT expr .)
    GE              reduce using rule 57 (expr -> LNOT expr .)
    GT              reduce using rule 57 (expr -> LNOT expr .)
    EQ              reduce using rule 57 (expr -> LNOT expr .)
    NE              reduce using rule 57 (expr -> LNOT expr .)
    RPAREN          reduce using rule 57 (expr -> LNOT expr .)
    COMMA           reduce using rule 57 (expr -> LNOT expr .)

  ! PLUS            [ shift and go to state 60 ]
  ! MINUS           [ shift and go to state 61 ]
  ! TIMES           [ shift and go to state 62 ]
  ! DIVIDE          [ shift and go to state 63 ]
  ! LOR             [ shift and go to state 64 ]
  ! LAND            [ shift and go to state 65 ]
  ! LT              [ shift and go to state 66 ]
  ! LE              [ shift and go to state 67 ]
  ! GE              [ shift and go to state 68 ]
  ! GT              [ shift and go to state 69 ]
  ! EQ              [ shift and go to state 70 ]
  ! NE              [ shift and go to state 71 ]


state 83

    (68) expr -> NEW ID .

    SEMI            reduce using rule 68 (expr -> NEW ID .)
    PLUS            reduce using rule 68 (expr -> NEW ID .)
    MINUS           reduce using rule 68 (expr -> NEW ID .)
    TIMES           reduce using rule 68 (expr -> NEW ID .)
    DIVIDE          reduce using rule 68 (expr -> NEW ID .)
    LOR             reduce using rule 68 (expr -> NEW ID .)
    LAND            reduce using rule 68 (expr -> NEW ID .)
    LT              reduce using rule 68 (expr -> NEW ID .)
    LE              reduce using rule 68 (expr -> NEW ID .)
    GE              reduce using rule 68 (expr -> NEW ID .)
    GT              reduce using rule 68 (expr -> NEW ID .)
    EQ              reduce using rule 68 (expr -> NEW ID .)
    NE              reduce using rule 68 (expr -> NEW ID .)
    RPAREN          reduce using rule 68 (expr -> NEW ID .)
    COMMA           reduce using rule 68 (expr -> NEW ID .)


state 84

    (71) expr -> SUPER PERIOD . expr
    (48) expr -> . LPAREN expr RPAREN
    (49) expr -> . ID
    (50) expr -> . INT_CONST
    (51) expr -> . STRING_CONST
    (52) expr -> . MINUS expr
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . LNOT expr
    (58) expr -> . expr LOR expr
    (59) expr -> . expr LAND expr
    (60) expr -> . expr LT expr
    (61) expr -> . expr LE expr
    (62) expr -> . expr GE expr
    (63) expr -> . expr GT expr
    (64) expr -> . expr EQ expr
    (65) expr -> . expr NE expr
    (66) expr -> . LPAREN INT RPAREN expr
    (67) expr -> . LPAREN STRING RPAREN expr
    (68) expr -> . NEW ID
    (69) expr -> . ID PERIOD expr
    (70) expr -> . THIS PERIOD expr
    (71) expr -> . SUPER PERIOD expr
    (72) expr -> . ID LPAREN expr_list RPAREN
    (73) expr -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 35
    ID              shift and go to state 73
    INT_CONST       shift and go to state 38
    STRING_CONST    shift and go to state 39
    MINUS           shift and go to state 40
    LNOT            shift and go to state 41
    NEW             shift and go to state 42
    THIS            shift and go to state 74
    SUPER           shift and go to state 43

    expr                           shift and go to state 122

state 85

    (15) class_def -> CLASS ID COLON ID . class_body
    (16) class_body -> . LBRACE class_member_list RBRACE

    LBRACE          shift and go to state 124

    class_body                     shift and go to state 123

state 86

    (12) func_param_def -> var_type . ID

    ID              shift and go to state 125


state 87

    (7) func_header -> var_type ID LPAREN param_list . RPAREN

    RPAREN          shift and go to state 126


state 88

    (9) param_list -> VOID .
    (26) var_type -> VOID .

    RPAREN          reduce using rule 9 (param_list -> VOID .)
    ID              reduce using rule 26 (var_type -> VOID .)


state 89

    (10) param_list -> func_param .

    RPAREN          reduce using rule 10 (param_list -> func_param .)


state 90

    (11) func_param -> func_param_def . next_param
    (13) next_param -> . COMMA func_param
    (14) next_param -> . empty
    (5) empty -> .

    COMMA           shift and go to state 128
    RPAREN          reduce using rule 5 (empty -> .)

    next_param                     shift and go to state 127
    empty                          shift and go to state 129

state 91

    (45) var_def -> var_type ID multiple_var_def .

    ID              reduce using rule 45 (var_def -> var_type ID multiple_var_def .)
    RETURN          reduce using rule 45 (var_def -> var_type ID multiple_var_def .)
    WHILE           reduce using rule 45 (var_def -> var_type ID multiple_var_def .)
    IF              reduce using rule 45 (var_def -> var_type ID multiple_var_def .)
    THIS            reduce using rule 45 (var_def -> var_type ID multiple_var_def .)
    INT             reduce using rule 45 (var_def -> var_type ID multiple_var_def .)
    STRING          reduce using rule 45 (var_def -> var_type ID multiple_var_def .)
    VOID            reduce using rule 45 (var_def -> var_type ID multiple_var_def .)
    LPAREN          reduce using rule 45 (var_def -> var_type ID multiple_var_def .)
    INT_CONST       reduce using rule 45 (var_def -> var_type ID multiple_var_def .)
    STRING_CONST    reduce using rule 45 (var_def -> var_type ID multiple_var_def .)
    MINUS           reduce using rule 45 (var_def -> var_type ID multiple_var_def .)
    LNOT            reduce using rule 45 (var_def -> var_type ID multiple_var_def .)
    NEW             reduce using rule 45 (var_def -> var_type ID multiple_var_def .)
    SUPER           reduce using rule 45 (var_def -> var_type ID multiple_var_def .)
    RBRACE          reduce using rule 45 (var_def -> var_type ID multiple_var_def .)


state 92

    (46) multiple_var_def -> SEMI .

    ID              reduce using rule 46 (multiple_var_def -> SEMI .)
    RETURN          reduce using rule 46 (multiple_var_def -> SEMI .)
    WHILE           reduce using rule 46 (multiple_var_def -> SEMI .)
    IF              reduce using rule 46 (multiple_var_def -> SEMI .)
    THIS            reduce using rule 46 (multiple_var_def -> SEMI .)
    INT             reduce using rule 46 (multiple_var_def -> SEMI .)
    STRING          reduce using rule 46 (multiple_var_def -> SEMI .)
    VOID            reduce using rule 46 (multiple_var_def -> SEMI .)
    LPAREN          reduce using rule 46 (multiple_var_def -> SEMI .)
    INT_CONST       reduce using rule 46 (multiple_var_def -> SEMI .)
    STRING_CONST    reduce using rule 46 (multiple_var_def -> SEMI .)
    MINUS           reduce using rule 46 (multiple_var_def -> SEMI .)
    LNOT            reduce using rule 46 (multiple_var_def -> SEMI .)
    NEW             reduce using rule 46 (multiple_var_def -> SEMI .)
    SUPER           reduce using rule 46 (multiple_var_def -> SEMI .)
    RBRACE          reduce using rule 46 (multiple_var_def -> SEMI .)


state 93

    (47) multiple_var_def -> COMMA . ID multiple_var_def

    ID              shift and go to state 130


state 94

    (44) var_assignment -> ID EQUALS expr . SEMI
    (53) expr -> expr . PLUS expr
    (54) expr -> expr . MINUS expr
    (55) expr -> expr . TIMES expr
    (56) expr -> expr . DIVIDE expr
    (58) expr -> expr . LOR expr
    (59) expr -> expr . LAND expr
    (60) expr -> expr . LT expr
    (61) expr -> expr . LE expr
    (62) expr -> expr . GE expr
    (63) expr -> expr . GT expr
    (64) expr -> expr . EQ expr
    (65) expr -> expr . NE expr

    SEMI            shift and go to state 131
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63
    LOR             shift and go to state 64
    LAND            shift and go to state 65
    LT              shift and go to state 66
    LE              shift and go to state 67
    GE              shift and go to state 68
    GT              shift and go to state 69
    EQ              shift and go to state 70
    NE              shift and go to state 71


state 95

    (42) statement_id -> ID PERIOD ID . EQUALS expr SEMI
    (49) expr -> ID .
    (69) expr -> ID . PERIOD expr
    (72) expr -> ID . LPAREN expr_list RPAREN
    (73) expr -> ID . LPAREN RPAREN

    EQUALS          shift and go to state 132
    PLUS            reduce using rule 49 (expr -> ID .)
    MINUS           reduce using rule 49 (expr -> ID .)
    TIMES           reduce using rule 49 (expr -> ID .)
    DIVIDE          reduce using rule 49 (expr -> ID .)
    LOR             reduce using rule 49 (expr -> ID .)
    LAND            reduce using rule 49 (expr -> ID .)
    LT              reduce using rule 49 (expr -> ID .)
    LE              reduce using rule 49 (expr -> ID .)
    GE              reduce using rule 49 (expr -> ID .)
    GT              reduce using rule 49 (expr -> ID .)
    EQ              reduce using rule 49 (expr -> ID .)
    NE              reduce using rule 49 (expr -> ID .)
    SEMI            reduce using rule 49 (expr -> ID .)
    PERIOD          shift and go to state 113
    LPAREN          shift and go to state 58


state 96

    (69) expr -> ID PERIOD expr .
    (53) expr -> expr . PLUS expr
    (54) expr -> expr . MINUS expr
    (55) expr -> expr . TIMES expr
    (56) expr -> expr . DIVIDE expr
    (58) expr -> expr . LOR expr
    (59) expr -> expr . LAND expr
    (60) expr -> expr . LT expr
    (61) expr -> expr . LE expr
    (62) expr -> expr . GE expr
    (63) expr -> expr . GT expr
    (64) expr -> expr . EQ expr
    (65) expr -> expr . NE expr

    SEMI            reduce using rule 69 (expr -> ID PERIOD expr .)
    PLUS            reduce using rule 69 (expr -> ID PERIOD expr .)
    MINUS           reduce using rule 69 (expr -> ID PERIOD expr .)
    TIMES           reduce using rule 69 (expr -> ID PERIOD expr .)
    DIVIDE          reduce using rule 69 (expr -> ID PERIOD expr .)
    LOR             reduce using rule 69 (expr -> ID PERIOD expr .)
    LAND            reduce using rule 69 (expr -> ID PERIOD expr .)
    LT              reduce using rule 69 (expr -> ID PERIOD expr .)
    LE              reduce using rule 69 (expr -> ID PERIOD expr .)
    GE              reduce using rule 69 (expr -> ID PERIOD expr .)
    GT              reduce using rule 69 (expr -> ID PERIOD expr .)
    EQ              reduce using rule 69 (expr -> ID PERIOD expr .)
    NE              reduce using rule 69 (expr -> ID PERIOD expr .)
    RPAREN          reduce using rule 69 (expr -> ID PERIOD expr .)
    COMMA           reduce using rule 69 (expr -> ID PERIOD expr .)

  ! PLUS            [ shift and go to state 60 ]
  ! MINUS           [ shift and go to state 61 ]
  ! TIMES           [ shift and go to state 62 ]
  ! DIVIDE          [ shift and go to state 63 ]
  ! LOR             [ shift and go to state 64 ]
  ! LAND            [ shift and go to state 65 ]
  ! LT              [ shift and go to state 66 ]
  ! LE              [ shift and go to state 67 ]
  ! GE              [ shift and go to state 68 ]
  ! GT              [ shift and go to state 69 ]
  ! EQ              [ shift and go to state 70 ]
  ! NE              [ shift and go to state 71 ]


state 97

    (72) expr -> ID LPAREN expr_list . RPAREN

    RPAREN          shift and go to state 133


state 98

    (73) expr -> ID LPAREN RPAREN .

    SEMI            reduce using rule 73 (expr -> ID LPAREN RPAREN .)
    PLUS            reduce using rule 73 (expr -> ID LPAREN RPAREN .)
    MINUS           reduce using rule 73 (expr -> ID LPAREN RPAREN .)
    TIMES           reduce using rule 73 (expr -> ID LPAREN RPAREN .)
    DIVIDE          reduce using rule 73 (expr -> ID LPAREN RPAREN .)
    LOR             reduce using rule 73 (expr -> ID LPAREN RPAREN .)
    LAND            reduce using rule 73 (expr -> ID LPAREN RPAREN .)
    LT              reduce using rule 73 (expr -> ID LPAREN RPAREN .)
    LE              reduce using rule 73 (expr -> ID LPAREN RPAREN .)
    GE              reduce using rule 73 (expr -> ID LPAREN RPAREN .)
    GT              reduce using rule 73 (expr -> ID LPAREN RPAREN .)
    EQ              reduce using rule 73 (expr -> ID LPAREN RPAREN .)
    NE              reduce using rule 73 (expr -> ID LPAREN RPAREN .)
    RPAREN          reduce using rule 73 (expr -> ID LPAREN RPAREN .)
    COMMA           reduce using rule 73 (expr -> ID LPAREN RPAREN .)


state 99

    (74) expr_list -> expr . next_expr
    (53) expr -> expr . PLUS expr
    (54) expr -> expr . MINUS expr
    (55) expr -> expr . TIMES expr
    (56) expr -> expr . DIVIDE expr
    (58) expr -> expr . LOR expr
    (59) expr -> expr . LAND expr
    (60) expr -> expr . LT expr
    (61) expr -> expr . LE expr
    (62) expr -> expr . GE expr
    (63) expr -> expr . GT expr
    (64) expr -> expr . EQ expr
    (65) expr -> expr . NE expr
    (75) next_expr -> . COMMA expr_list
    (76) next_expr -> . empty
    (5) empty -> .

    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63
    LOR             shift and go to state 64
    LAND            shift and go to state 65
    LT              shift and go to state 66
    LE              shift and go to state 67
    GE              shift and go to state 68
    GT              shift and go to state 69
    EQ              shift and go to state 70
    NE              shift and go to state 71
    COMMA           shift and go to state 135
    RPAREN          reduce using rule 5 (empty -> .)

    next_expr                      shift and go to state 134
    empty                          shift and go to state 136

state 100

    (53) expr -> expr PLUS expr .
    (53) expr -> expr . PLUS expr
    (54) expr -> expr . MINUS expr
    (55) expr -> expr . TIMES expr
    (56) expr -> expr . DIVIDE expr
    (58) expr -> expr . LOR expr
    (59) expr -> expr . LAND expr
    (60) expr -> expr . LT expr
    (61) expr -> expr . LE expr
    (62) expr -> expr . GE expr
    (63) expr -> expr . GT expr
    (64) expr -> expr . EQ expr
    (65) expr -> expr . NE expr

    SEMI            reduce using rule 53 (expr -> expr PLUS expr .)
    PLUS            reduce using rule 53 (expr -> expr PLUS expr .)
    MINUS           reduce using rule 53 (expr -> expr PLUS expr .)
    LOR             reduce using rule 53 (expr -> expr PLUS expr .)
    LAND            reduce using rule 53 (expr -> expr PLUS expr .)
    LT              reduce using rule 53 (expr -> expr PLUS expr .)
    LE              reduce using rule 53 (expr -> expr PLUS expr .)
    GE              reduce using rule 53 (expr -> expr PLUS expr .)
    GT              reduce using rule 53 (expr -> expr PLUS expr .)
    EQ              reduce using rule 53 (expr -> expr PLUS expr .)
    NE              reduce using rule 53 (expr -> expr PLUS expr .)
    RPAREN          reduce using rule 53 (expr -> expr PLUS expr .)
    COMMA           reduce using rule 53 (expr -> expr PLUS expr .)
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63

  ! TIMES           [ reduce using rule 53 (expr -> expr PLUS expr .) ]
  ! DIVIDE          [ reduce using rule 53 (expr -> expr PLUS expr .) ]
  ! PLUS            [ shift and go to state 60 ]
  ! MINUS           [ shift and go to state 61 ]
  ! LOR             [ shift and go to state 64 ]
  ! LAND            [ shift and go to state 65 ]
  ! LT              [ shift and go to state 66 ]
  ! LE              [ shift and go to state 67 ]
  ! GE              [ shift and go to state 68 ]
  ! GT              [ shift and go to state 69 ]
  ! EQ              [ shift and go to state 70 ]
  ! NE              [ shift and go to state 71 ]


state 101

    (54) expr -> expr MINUS expr .
    (53) expr -> expr . PLUS expr
    (54) expr -> expr . MINUS expr
    (55) expr -> expr . TIMES expr
    (56) expr -> expr . DIVIDE expr
    (58) expr -> expr . LOR expr
    (59) expr -> expr . LAND expr
    (60) expr -> expr . LT expr
    (61) expr -> expr . LE expr
    (62) expr -> expr . GE expr
    (63) expr -> expr . GT expr
    (64) expr -> expr . EQ expr
    (65) expr -> expr . NE expr

    SEMI            reduce using rule 54 (expr -> expr MINUS expr .)
    PLUS            reduce using rule 54 (expr -> expr MINUS expr .)
    MINUS           reduce using rule 54 (expr -> expr MINUS expr .)
    LOR             reduce using rule 54 (expr -> expr MINUS expr .)
    LAND            reduce using rule 54 (expr -> expr MINUS expr .)
    LT              reduce using rule 54 (expr -> expr MINUS expr .)
    LE              reduce using rule 54 (expr -> expr MINUS expr .)
    GE              reduce using rule 54 (expr -> expr MINUS expr .)
    GT              reduce using rule 54 (expr -> expr MINUS expr .)
    EQ              reduce using rule 54 (expr -> expr MINUS expr .)
    NE              reduce using rule 54 (expr -> expr MINUS expr .)
    RPAREN          reduce using rule 54 (expr -> expr MINUS expr .)
    COMMA           reduce using rule 54 (expr -> expr MINUS expr .)
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63

  ! TIMES           [ reduce using rule 54 (expr -> expr MINUS expr .) ]
  ! DIVIDE          [ reduce using rule 54 (expr -> expr MINUS expr .) ]
  ! PLUS            [ shift and go to state 60 ]
  ! MINUS           [ shift and go to state 61 ]
  ! LOR             [ shift and go to state 64 ]
  ! LAND            [ shift and go to state 65 ]
  ! LT              [ shift and go to state 66 ]
  ! LE              [ shift and go to state 67 ]
  ! GE              [ shift and go to state 68 ]
  ! GT              [ shift and go to state 69 ]
  ! EQ              [ shift and go to state 70 ]
  ! NE              [ shift and go to state 71 ]


state 102

    (55) expr -> expr TIMES expr .
    (53) expr -> expr . PLUS expr
    (54) expr -> expr . MINUS expr
    (55) expr -> expr . TIMES expr
    (56) expr -> expr . DIVIDE expr
    (58) expr -> expr . LOR expr
    (59) expr -> expr . LAND expr
    (60) expr -> expr . LT expr
    (61) expr -> expr . LE expr
    (62) expr -> expr . GE expr
    (63) expr -> expr . GT expr
    (64) expr -> expr . EQ expr
    (65) expr -> expr . NE expr

    SEMI            reduce using rule 55 (expr -> expr TIMES expr .)
    PLUS            reduce using rule 55 (expr -> expr TIMES expr .)
    MINUS           reduce using rule 55 (expr -> expr TIMES expr .)
    TIMES           reduce using rule 55 (expr -> expr TIMES expr .)
    DIVIDE          reduce using rule 55 (expr -> expr TIMES expr .)
    LOR             reduce using rule 55 (expr -> expr TIMES expr .)
    LAND            reduce using rule 55 (expr -> expr TIMES expr .)
    LT              reduce using rule 55 (expr -> expr TIMES expr .)
    LE              reduce using rule 55 (expr -> expr TIMES expr .)
    GE              reduce using rule 55 (expr -> expr TIMES expr .)
    GT              reduce using rule 55 (expr -> expr TIMES expr .)
    EQ              reduce using rule 55 (expr -> expr TIMES expr .)
    NE              reduce using rule 55 (expr -> expr TIMES expr .)
    RPAREN          reduce using rule 55 (expr -> expr TIMES expr .)
    COMMA           reduce using rule 55 (expr -> expr TIMES expr .)

  ! PLUS            [ shift and go to state 60 ]
  ! MINUS           [ shift and go to state 61 ]
  ! TIMES           [ shift and go to state 62 ]
  ! DIVIDE          [ shift and go to state 63 ]
  ! LOR             [ shift and go to state 64 ]
  ! LAND            [ shift and go to state 65 ]
  ! LT              [ shift and go to state 66 ]
  ! LE              [ shift and go to state 67 ]
  ! GE              [ shift and go to state 68 ]
  ! GT              [ shift and go to state 69 ]
  ! EQ              [ shift and go to state 70 ]
  ! NE              [ shift and go to state 71 ]


state 103

    (56) expr -> expr DIVIDE expr .
    (53) expr -> expr . PLUS expr
    (54) expr -> expr . MINUS expr
    (55) expr -> expr . TIMES expr
    (56) expr -> expr . DIVIDE expr
    (58) expr -> expr . LOR expr
    (59) expr -> expr . LAND expr
    (60) expr -> expr . LT expr
    (61) expr -> expr . LE expr
    (62) expr -> expr . GE expr
    (63) expr -> expr . GT expr
    (64) expr -> expr . EQ expr
    (65) expr -> expr . NE expr

    SEMI            reduce using rule 56 (expr -> expr DIVIDE expr .)
    PLUS            reduce using rule 56 (expr -> expr DIVIDE expr .)
    MINUS           reduce using rule 56 (expr -> expr DIVIDE expr .)
    TIMES           reduce using rule 56 (expr -> expr DIVIDE expr .)
    DIVIDE          reduce using rule 56 (expr -> expr DIVIDE expr .)
    LOR             reduce using rule 56 (expr -> expr DIVIDE expr .)
    LAND            reduce using rule 56 (expr -> expr DIVIDE expr .)
    LT              reduce using rule 56 (expr -> expr DIVIDE expr .)
    LE              reduce using rule 56 (expr -> expr DIVIDE expr .)
    GE              reduce using rule 56 (expr -> expr DIVIDE expr .)
    GT              reduce using rule 56 (expr -> expr DIVIDE expr .)
    EQ              reduce using rule 56 (expr -> expr DIVIDE expr .)
    NE              reduce using rule 56 (expr -> expr DIVIDE expr .)
    RPAREN          reduce using rule 56 (expr -> expr DIVIDE expr .)
    COMMA           reduce using rule 56 (expr -> expr DIVIDE expr .)

  ! PLUS            [ shift and go to state 60 ]
  ! MINUS           [ shift and go to state 61 ]
  ! TIMES           [ shift and go to state 62 ]
  ! DIVIDE          [ shift and go to state 63 ]
  ! LOR             [ shift and go to state 64 ]
  ! LAND            [ shift and go to state 65 ]
  ! LT              [ shift and go to state 66 ]
  ! LE              [ shift and go to state 67 ]
  ! GE              [ shift and go to state 68 ]
  ! GT              [ shift and go to state 69 ]
  ! EQ              [ shift and go to state 70 ]
  ! NE              [ shift and go to state 71 ]


state 104

    (58) expr -> expr LOR expr .
    (53) expr -> expr . PLUS expr
    (54) expr -> expr . MINUS expr
    (55) expr -> expr . TIMES expr
    (56) expr -> expr . DIVIDE expr
    (58) expr -> expr . LOR expr
    (59) expr -> expr . LAND expr
    (60) expr -> expr . LT expr
    (61) expr -> expr . LE expr
    (62) expr -> expr . GE expr
    (63) expr -> expr . GT expr
    (64) expr -> expr . EQ expr
    (65) expr -> expr . NE expr

    SEMI            reduce using rule 58 (expr -> expr LOR expr .)
    LOR             reduce using rule 58 (expr -> expr LOR expr .)
    RPAREN          reduce using rule 58 (expr -> expr LOR expr .)
    COMMA           reduce using rule 58 (expr -> expr LOR expr .)
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63
    LAND            shift and go to state 65
    LT              shift and go to state 66
    LE              shift and go to state 67
    GE              shift and go to state 68
    GT              shift and go to state 69
    EQ              shift and go to state 70
    NE              shift and go to state 71

  ! PLUS            [ reduce using rule 58 (expr -> expr LOR expr .) ]
  ! MINUS           [ reduce using rule 58 (expr -> expr LOR expr .) ]
  ! TIMES           [ reduce using rule 58 (expr -> expr LOR expr .) ]
  ! DIVIDE          [ reduce using rule 58 (expr -> expr LOR expr .) ]
  ! LAND            [ reduce using rule 58 (expr -> expr LOR expr .) ]
  ! LT              [ reduce using rule 58 (expr -> expr LOR expr .) ]
  ! LE              [ reduce using rule 58 (expr -> expr LOR expr .) ]
  ! GE              [ reduce using rule 58 (expr -> expr LOR expr .) ]
  ! GT              [ reduce using rule 58 (expr -> expr LOR expr .) ]
  ! EQ              [ reduce using rule 58 (expr -> expr LOR expr .) ]
  ! NE              [ reduce using rule 58 (expr -> expr LOR expr .) ]
  ! LOR             [ shift and go to state 64 ]


state 105

    (59) expr -> expr LAND expr .
    (53) expr -> expr . PLUS expr
    (54) expr -> expr . MINUS expr
    (55) expr -> expr . TIMES expr
    (56) expr -> expr . DIVIDE expr
    (58) expr -> expr . LOR expr
    (59) expr -> expr . LAND expr
    (60) expr -> expr . LT expr
    (61) expr -> expr . LE expr
    (62) expr -> expr . GE expr
    (63) expr -> expr . GT expr
    (64) expr -> expr . EQ expr
    (65) expr -> expr . NE expr

    SEMI            reduce using rule 59 (expr -> expr LAND expr .)
    LOR             reduce using rule 59 (expr -> expr LAND expr .)
    LAND            reduce using rule 59 (expr -> expr LAND expr .)
    RPAREN          reduce using rule 59 (expr -> expr LAND expr .)
    COMMA           reduce using rule 59 (expr -> expr LAND expr .)
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63
    LT              shift and go to state 66
    LE              shift and go to state 67
    GE              shift and go to state 68
    GT              shift and go to state 69
    EQ              shift and go to state 70
    NE              shift and go to state 71

  ! PLUS            [ reduce using rule 59 (expr -> expr LAND expr .) ]
  ! MINUS           [ reduce using rule 59 (expr -> expr LAND expr .) ]
  ! TIMES           [ reduce using rule 59 (expr -> expr LAND expr .) ]
  ! DIVIDE          [ reduce using rule 59 (expr -> expr LAND expr .) ]
  ! LT              [ reduce using rule 59 (expr -> expr LAND expr .) ]
  ! LE              [ reduce using rule 59 (expr -> expr LAND expr .) ]
  ! GE              [ reduce using rule 59 (expr -> expr LAND expr .) ]
  ! GT              [ reduce using rule 59 (expr -> expr LAND expr .) ]
  ! EQ              [ reduce using rule 59 (expr -> expr LAND expr .) ]
  ! NE              [ reduce using rule 59 (expr -> expr LAND expr .) ]
  ! LOR             [ shift and go to state 64 ]
  ! LAND            [ shift and go to state 65 ]


state 106

    (60) expr -> expr LT expr .
    (53) expr -> expr . PLUS expr
    (54) expr -> expr . MINUS expr
    (55) expr -> expr . TIMES expr
    (56) expr -> expr . DIVIDE expr
    (58) expr -> expr . LOR expr
    (59) expr -> expr . LAND expr
    (60) expr -> expr . LT expr
    (61) expr -> expr . LE expr
    (62) expr -> expr . GE expr
    (63) expr -> expr . GT expr
    (64) expr -> expr . EQ expr
    (65) expr -> expr . NE expr

    SEMI            reduce using rule 60 (expr -> expr LT expr .)
    LOR             reduce using rule 60 (expr -> expr LT expr .)
    LAND            reduce using rule 60 (expr -> expr LT expr .)
    LT              reduce using rule 60 (expr -> expr LT expr .)
    LE              reduce using rule 60 (expr -> expr LT expr .)
    GE              reduce using rule 60 (expr -> expr LT expr .)
    GT              reduce using rule 60 (expr -> expr LT expr .)
    EQ              reduce using rule 60 (expr -> expr LT expr .)
    NE              reduce using rule 60 (expr -> expr LT expr .)
    RPAREN          reduce using rule 60 (expr -> expr LT expr .)
    COMMA           reduce using rule 60 (expr -> expr LT expr .)
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63

  ! PLUS            [ reduce using rule 60 (expr -> expr LT expr .) ]
  ! MINUS           [ reduce using rule 60 (expr -> expr LT expr .) ]
  ! TIMES           [ reduce using rule 60 (expr -> expr LT expr .) ]
  ! DIVIDE          [ reduce using rule 60 (expr -> expr LT expr .) ]
  ! LOR             [ shift and go to state 64 ]
  ! LAND            [ shift and go to state 65 ]
  ! LT              [ shift and go to state 66 ]
  ! LE              [ shift and go to state 67 ]
  ! GE              [ shift and go to state 68 ]
  ! GT              [ shift and go to state 69 ]
  ! EQ              [ shift and go to state 70 ]
  ! NE              [ shift and go to state 71 ]


state 107

    (61) expr -> expr LE expr .
    (53) expr -> expr . PLUS expr
    (54) expr -> expr . MINUS expr
    (55) expr -> expr . TIMES expr
    (56) expr -> expr . DIVIDE expr
    (58) expr -> expr . LOR expr
    (59) expr -> expr . LAND expr
    (60) expr -> expr . LT expr
    (61) expr -> expr . LE expr
    (62) expr -> expr . GE expr
    (63) expr -> expr . GT expr
    (64) expr -> expr . EQ expr
    (65) expr -> expr . NE expr

    SEMI            reduce using rule 61 (expr -> expr LE expr .)
    LOR             reduce using rule 61 (expr -> expr LE expr .)
    LAND            reduce using rule 61 (expr -> expr LE expr .)
    LT              reduce using rule 61 (expr -> expr LE expr .)
    LE              reduce using rule 61 (expr -> expr LE expr .)
    GE              reduce using rule 61 (expr -> expr LE expr .)
    GT              reduce using rule 61 (expr -> expr LE expr .)
    EQ              reduce using rule 61 (expr -> expr LE expr .)
    NE              reduce using rule 61 (expr -> expr LE expr .)
    RPAREN          reduce using rule 61 (expr -> expr LE expr .)
    COMMA           reduce using rule 61 (expr -> expr LE expr .)
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63

  ! PLUS            [ reduce using rule 61 (expr -> expr LE expr .) ]
  ! MINUS           [ reduce using rule 61 (expr -> expr LE expr .) ]
  ! TIMES           [ reduce using rule 61 (expr -> expr LE expr .) ]
  ! DIVIDE          [ reduce using rule 61 (expr -> expr LE expr .) ]
  ! LOR             [ shift and go to state 64 ]
  ! LAND            [ shift and go to state 65 ]
  ! LT              [ shift and go to state 66 ]
  ! LE              [ shift and go to state 67 ]
  ! GE              [ shift and go to state 68 ]
  ! GT              [ shift and go to state 69 ]
  ! EQ              [ shift and go to state 70 ]
  ! NE              [ shift and go to state 71 ]


state 108

    (62) expr -> expr GE expr .
    (53) expr -> expr . PLUS expr
    (54) expr -> expr . MINUS expr
    (55) expr -> expr . TIMES expr
    (56) expr -> expr . DIVIDE expr
    (58) expr -> expr . LOR expr
    (59) expr -> expr . LAND expr
    (60) expr -> expr . LT expr
    (61) expr -> expr . LE expr
    (62) expr -> expr . GE expr
    (63) expr -> expr . GT expr
    (64) expr -> expr . EQ expr
    (65) expr -> expr . NE expr

    SEMI            reduce using rule 62 (expr -> expr GE expr .)
    LOR             reduce using rule 62 (expr -> expr GE expr .)
    LAND            reduce using rule 62 (expr -> expr GE expr .)
    LT              reduce using rule 62 (expr -> expr GE expr .)
    LE              reduce using rule 62 (expr -> expr GE expr .)
    GE              reduce using rule 62 (expr -> expr GE expr .)
    GT              reduce using rule 62 (expr -> expr GE expr .)
    EQ              reduce using rule 62 (expr -> expr GE expr .)
    NE              reduce using rule 62 (expr -> expr GE expr .)
    RPAREN          reduce using rule 62 (expr -> expr GE expr .)
    COMMA           reduce using rule 62 (expr -> expr GE expr .)
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63

  ! PLUS            [ reduce using rule 62 (expr -> expr GE expr .) ]
  ! MINUS           [ reduce using rule 62 (expr -> expr GE expr .) ]
  ! TIMES           [ reduce using rule 62 (expr -> expr GE expr .) ]
  ! DIVIDE          [ reduce using rule 62 (expr -> expr GE expr .) ]
  ! LOR             [ shift and go to state 64 ]
  ! LAND            [ shift and go to state 65 ]
  ! LT              [ shift and go to state 66 ]
  ! LE              [ shift and go to state 67 ]
  ! GE              [ shift and go to state 68 ]
  ! GT              [ shift and go to state 69 ]
  ! EQ              [ shift and go to state 70 ]
  ! NE              [ shift and go to state 71 ]


state 109

    (63) expr -> expr GT expr .
    (53) expr -> expr . PLUS expr
    (54) expr -> expr . MINUS expr
    (55) expr -> expr . TIMES expr
    (56) expr -> expr . DIVIDE expr
    (58) expr -> expr . LOR expr
    (59) expr -> expr . LAND expr
    (60) expr -> expr . LT expr
    (61) expr -> expr . LE expr
    (62) expr -> expr . GE expr
    (63) expr -> expr . GT expr
    (64) expr -> expr . EQ expr
    (65) expr -> expr . NE expr

    SEMI            reduce using rule 63 (expr -> expr GT expr .)
    LOR             reduce using rule 63 (expr -> expr GT expr .)
    LAND            reduce using rule 63 (expr -> expr GT expr .)
    LT              reduce using rule 63 (expr -> expr GT expr .)
    LE              reduce using rule 63 (expr -> expr GT expr .)
    GE              reduce using rule 63 (expr -> expr GT expr .)
    GT              reduce using rule 63 (expr -> expr GT expr .)
    EQ              reduce using rule 63 (expr -> expr GT expr .)
    NE              reduce using rule 63 (expr -> expr GT expr .)
    RPAREN          reduce using rule 63 (expr -> expr GT expr .)
    COMMA           reduce using rule 63 (expr -> expr GT expr .)
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63

  ! PLUS            [ reduce using rule 63 (expr -> expr GT expr .) ]
  ! MINUS           [ reduce using rule 63 (expr -> expr GT expr .) ]
  ! TIMES           [ reduce using rule 63 (expr -> expr GT expr .) ]
  ! DIVIDE          [ reduce using rule 63 (expr -> expr GT expr .) ]
  ! LOR             [ shift and go to state 64 ]
  ! LAND            [ shift and go to state 65 ]
  ! LT              [ shift and go to state 66 ]
  ! LE              [ shift and go to state 67 ]
  ! GE              [ shift and go to state 68 ]
  ! GT              [ shift and go to state 69 ]
  ! EQ              [ shift and go to state 70 ]
  ! NE              [ shift and go to state 71 ]


state 110

    (64) expr -> expr EQ expr .
    (53) expr -> expr . PLUS expr
    (54) expr -> expr . MINUS expr
    (55) expr -> expr . TIMES expr
    (56) expr -> expr . DIVIDE expr
    (58) expr -> expr . LOR expr
    (59) expr -> expr . LAND expr
    (60) expr -> expr . LT expr
    (61) expr -> expr . LE expr
    (62) expr -> expr . GE expr
    (63) expr -> expr . GT expr
    (64) expr -> expr . EQ expr
    (65) expr -> expr . NE expr

    SEMI            reduce using rule 64 (expr -> expr EQ expr .)
    LOR             reduce using rule 64 (expr -> expr EQ expr .)
    LAND            reduce using rule 64 (expr -> expr EQ expr .)
    EQ              reduce using rule 64 (expr -> expr EQ expr .)
    NE              reduce using rule 64 (expr -> expr EQ expr .)
    RPAREN          reduce using rule 64 (expr -> expr EQ expr .)
    COMMA           reduce using rule 64 (expr -> expr EQ expr .)
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63
    LT              shift and go to state 66
    LE              shift and go to state 67
    GE              shift and go to state 68
    GT              shift and go to state 69

  ! PLUS            [ reduce using rule 64 (expr -> expr EQ expr .) ]
  ! MINUS           [ reduce using rule 64 (expr -> expr EQ expr .) ]
  ! TIMES           [ reduce using rule 64 (expr -> expr EQ expr .) ]
  ! DIVIDE          [ reduce using rule 64 (expr -> expr EQ expr .) ]
  ! LT              [ reduce using rule 64 (expr -> expr EQ expr .) ]
  ! LE              [ reduce using rule 64 (expr -> expr EQ expr .) ]
  ! GE              [ reduce using rule 64 (expr -> expr EQ expr .) ]
  ! GT              [ reduce using rule 64 (expr -> expr EQ expr .) ]
  ! LOR             [ shift and go to state 64 ]
  ! LAND            [ shift and go to state 65 ]
  ! EQ              [ shift and go to state 70 ]
  ! NE              [ shift and go to state 71 ]


state 111

    (65) expr -> expr NE expr .
    (53) expr -> expr . PLUS expr
    (54) expr -> expr . MINUS expr
    (55) expr -> expr . TIMES expr
    (56) expr -> expr . DIVIDE expr
    (58) expr -> expr . LOR expr
    (59) expr -> expr . LAND expr
    (60) expr -> expr . LT expr
    (61) expr -> expr . LE expr
    (62) expr -> expr . GE expr
    (63) expr -> expr . GT expr
    (64) expr -> expr . EQ expr
    (65) expr -> expr . NE expr

    SEMI            reduce using rule 65 (expr -> expr NE expr .)
    LOR             reduce using rule 65 (expr -> expr NE expr .)
    LAND            reduce using rule 65 (expr -> expr NE expr .)
    EQ              reduce using rule 65 (expr -> expr NE expr .)
    NE              reduce using rule 65 (expr -> expr NE expr .)
    RPAREN          reduce using rule 65 (expr -> expr NE expr .)
    COMMA           reduce using rule 65 (expr -> expr NE expr .)
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63
    LT              shift and go to state 66
    LE              shift and go to state 67
    GE              shift and go to state 68
    GT              shift and go to state 69

  ! PLUS            [ reduce using rule 65 (expr -> expr NE expr .) ]
  ! MINUS           [ reduce using rule 65 (expr -> expr NE expr .) ]
  ! TIMES           [ reduce using rule 65 (expr -> expr NE expr .) ]
  ! DIVIDE          [ reduce using rule 65 (expr -> expr NE expr .) ]
  ! LT              [ reduce using rule 65 (expr -> expr NE expr .) ]
  ! LE              [ reduce using rule 65 (expr -> expr NE expr .) ]
  ! GE              [ reduce using rule 65 (expr -> expr NE expr .) ]
  ! GT              [ reduce using rule 65 (expr -> expr NE expr .) ]
  ! LOR             [ shift and go to state 64 ]
  ! LAND            [ shift and go to state 65 ]
  ! EQ              [ shift and go to state 70 ]
  ! NE              [ shift and go to state 71 ]


state 112

    (40) statement_return -> RETURN expr SEMI .

    ID              reduce using rule 40 (statement_return -> RETURN expr SEMI .)
    RETURN          reduce using rule 40 (statement_return -> RETURN expr SEMI .)
    WHILE           reduce using rule 40 (statement_return -> RETURN expr SEMI .)
    IF              reduce using rule 40 (statement_return -> RETURN expr SEMI .)
    THIS            reduce using rule 40 (statement_return -> RETURN expr SEMI .)
    INT             reduce using rule 40 (statement_return -> RETURN expr SEMI .)
    STRING          reduce using rule 40 (statement_return -> RETURN expr SEMI .)
    VOID            reduce using rule 40 (statement_return -> RETURN expr SEMI .)
    LPAREN          reduce using rule 40 (statement_return -> RETURN expr SEMI .)
    INT_CONST       reduce using rule 40 (statement_return -> RETURN expr SEMI .)
    STRING_CONST    reduce using rule 40 (statement_return -> RETURN expr SEMI .)
    MINUS           reduce using rule 40 (statement_return -> RETURN expr SEMI .)
    LNOT            reduce using rule 40 (statement_return -> RETURN expr SEMI .)
    NEW             reduce using rule 40 (statement_return -> RETURN expr SEMI .)
    SUPER           reduce using rule 40 (statement_return -> RETURN expr SEMI .)
    RBRACE          reduce using rule 40 (statement_return -> RETURN expr SEMI .)


state 113

    (69) expr -> ID PERIOD . expr
    (48) expr -> . LPAREN expr RPAREN
    (49) expr -> . ID
    (50) expr -> . INT_CONST
    (51) expr -> . STRING_CONST
    (52) expr -> . MINUS expr
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . LNOT expr
    (58) expr -> . expr LOR expr
    (59) expr -> . expr LAND expr
    (60) expr -> . expr LT expr
    (61) expr -> . expr LE expr
    (62) expr -> . expr GE expr
    (63) expr -> . expr GT expr
    (64) expr -> . expr EQ expr
    (65) expr -> . expr NE expr
    (66) expr -> . LPAREN INT RPAREN expr
    (67) expr -> . LPAREN STRING RPAREN expr
    (68) expr -> . NEW ID
    (69) expr -> . ID PERIOD expr
    (70) expr -> . THIS PERIOD expr
    (71) expr -> . SUPER PERIOD expr
    (72) expr -> . ID LPAREN expr_list RPAREN
    (73) expr -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 35
    ID              shift and go to state 73
    INT_CONST       shift and go to state 38
    STRING_CONST    shift and go to state 39
    MINUS           shift and go to state 40
    LNOT            shift and go to state 41
    NEW             shift and go to state 42
    THIS            shift and go to state 74
    SUPER           shift and go to state 43

    expr                           shift and go to state 96

state 114

    (70) expr -> THIS PERIOD . expr
    (48) expr -> . LPAREN expr RPAREN
    (49) expr -> . ID
    (50) expr -> . INT_CONST
    (51) expr -> . STRING_CONST
    (52) expr -> . MINUS expr
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . LNOT expr
    (58) expr -> . expr LOR expr
    (59) expr -> . expr LAND expr
    (60) expr -> . expr LT expr
    (61) expr -> . expr LE expr
    (62) expr -> . expr GE expr
    (63) expr -> . expr GT expr
    (64) expr -> . expr EQ expr
    (65) expr -> . expr NE expr
    (66) expr -> . LPAREN INT RPAREN expr
    (67) expr -> . LPAREN STRING RPAREN expr
    (68) expr -> . NEW ID
    (69) expr -> . ID PERIOD expr
    (70) expr -> . THIS PERIOD expr
    (71) expr -> . SUPER PERIOD expr
    (72) expr -> . ID LPAREN expr_list RPAREN
    (73) expr -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 35
    ID              shift and go to state 73
    INT_CONST       shift and go to state 38
    STRING_CONST    shift and go to state 39
    MINUS           shift and go to state 40
    LNOT            shift and go to state 41
    NEW             shift and go to state 42
    THIS            shift and go to state 74
    SUPER           shift and go to state 43

    expr                           shift and go to state 121

state 115

    (39) statement_while -> WHILE LPAREN expr . RPAREN statement_new_scope
    (53) expr -> expr . PLUS expr
    (54) expr -> expr . MINUS expr
    (55) expr -> expr . TIMES expr
    (56) expr -> expr . DIVIDE expr
    (58) expr -> expr . LOR expr
    (59) expr -> expr . LAND expr
    (60) expr -> expr . LT expr
    (61) expr -> expr . LE expr
    (62) expr -> expr . GE expr
    (63) expr -> expr . GT expr
    (64) expr -> expr . EQ expr
    (65) expr -> expr . NE expr

    RPAREN          shift and go to state 137
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63
    LOR             shift and go to state 64
    LAND            shift and go to state 65
    LT              shift and go to state 66
    LE              shift and go to state 67
    GE              shift and go to state 68
    GT              shift and go to state 69
    EQ              shift and go to state 70
    NE              shift and go to state 71


state 116

    (48) expr -> LPAREN expr RPAREN .

    SEMI            reduce using rule 48 (expr -> LPAREN expr RPAREN .)
    PLUS            reduce using rule 48 (expr -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 48 (expr -> LPAREN expr RPAREN .)
    TIMES           reduce using rule 48 (expr -> LPAREN expr RPAREN .)
    DIVIDE          reduce using rule 48 (expr -> LPAREN expr RPAREN .)
    LOR             reduce using rule 48 (expr -> LPAREN expr RPAREN .)
    LAND            reduce using rule 48 (expr -> LPAREN expr RPAREN .)
    LT              reduce using rule 48 (expr -> LPAREN expr RPAREN .)
    LE              reduce using rule 48 (expr -> LPAREN expr RPAREN .)
    GE              reduce using rule 48 (expr -> LPAREN expr RPAREN .)
    GT              reduce using rule 48 (expr -> LPAREN expr RPAREN .)
    EQ              reduce using rule 48 (expr -> LPAREN expr RPAREN .)
    NE              reduce using rule 48 (expr -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 48 (expr -> LPAREN expr RPAREN .)
    COMMA           reduce using rule 48 (expr -> LPAREN expr RPAREN .)


state 117

    (66) expr -> LPAREN INT RPAREN . expr
    (48) expr -> . LPAREN expr RPAREN
    (49) expr -> . ID
    (50) expr -> . INT_CONST
    (51) expr -> . STRING_CONST
    (52) expr -> . MINUS expr
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . LNOT expr
    (58) expr -> . expr LOR expr
    (59) expr -> . expr LAND expr
    (60) expr -> . expr LT expr
    (61) expr -> . expr LE expr
    (62) expr -> . expr GE expr
    (63) expr -> . expr GT expr
    (64) expr -> . expr EQ expr
    (65) expr -> . expr NE expr
    (66) expr -> . LPAREN INT RPAREN expr
    (67) expr -> . LPAREN STRING RPAREN expr
    (68) expr -> . NEW ID
    (69) expr -> . ID PERIOD expr
    (70) expr -> . THIS PERIOD expr
    (71) expr -> . SUPER PERIOD expr
    (72) expr -> . ID LPAREN expr_list RPAREN
    (73) expr -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 35
    ID              shift and go to state 73
    INT_CONST       shift and go to state 38
    STRING_CONST    shift and go to state 39
    MINUS           shift and go to state 40
    LNOT            shift and go to state 41
    NEW             shift and go to state 42
    THIS            shift and go to state 74
    SUPER           shift and go to state 43

    expr                           shift and go to state 138

state 118

    (67) expr -> LPAREN STRING RPAREN . expr
    (48) expr -> . LPAREN expr RPAREN
    (49) expr -> . ID
    (50) expr -> . INT_CONST
    (51) expr -> . STRING_CONST
    (52) expr -> . MINUS expr
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . LNOT expr
    (58) expr -> . expr LOR expr
    (59) expr -> . expr LAND expr
    (60) expr -> . expr LT expr
    (61) expr -> . expr LE expr
    (62) expr -> . expr GE expr
    (63) expr -> . expr GT expr
    (64) expr -> . expr EQ expr
    (65) expr -> . expr NE expr
    (66) expr -> . LPAREN INT RPAREN expr
    (67) expr -> . LPAREN STRING RPAREN expr
    (68) expr -> . NEW ID
    (69) expr -> . ID PERIOD expr
    (70) expr -> . THIS PERIOD expr
    (71) expr -> . SUPER PERIOD expr
    (72) expr -> . ID LPAREN expr_list RPAREN
    (73) expr -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 35
    ID              shift and go to state 73
    INT_CONST       shift and go to state 38
    STRING_CONST    shift and go to state 39
    MINUS           shift and go to state 40
    LNOT            shift and go to state 41
    NEW             shift and go to state 42
    THIS            shift and go to state 74
    SUPER           shift and go to state 43

    expr                           shift and go to state 139

state 119

    (38) statement_if -> IF LPAREN expr . RPAREN statement_new_scope ELSE statement_new_scope
    (53) expr -> expr . PLUS expr
    (54) expr -> expr . MINUS expr
    (55) expr -> expr . TIMES expr
    (56) expr -> expr . DIVIDE expr
    (58) expr -> expr . LOR expr
    (59) expr -> expr . LAND expr
    (60) expr -> expr . LT expr
    (61) expr -> expr . LE expr
    (62) expr -> expr . GE expr
    (63) expr -> expr . GT expr
    (64) expr -> expr . EQ expr
    (65) expr -> expr . NE expr

    RPAREN          shift and go to state 140
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63
    LOR             shift and go to state 64
    LAND            shift and go to state 65
    LT              shift and go to state 66
    LE              shift and go to state 67
    GE              shift and go to state 68
    GT              shift and go to state 69
    EQ              shift and go to state 70
    NE              shift and go to state 71


state 120

    (41) statement_this -> THIS PERIOD ID . EQUALS expr SEMI
    (49) expr -> ID .
    (69) expr -> ID . PERIOD expr
    (72) expr -> ID . LPAREN expr_list RPAREN
    (73) expr -> ID . LPAREN RPAREN

    EQUALS          shift and go to state 141
    PLUS            reduce using rule 49 (expr -> ID .)
    MINUS           reduce using rule 49 (expr -> ID .)
    TIMES           reduce using rule 49 (expr -> ID .)
    DIVIDE          reduce using rule 49 (expr -> ID .)
    LOR             reduce using rule 49 (expr -> ID .)
    LAND            reduce using rule 49 (expr -> ID .)
    LT              reduce using rule 49 (expr -> ID .)
    LE              reduce using rule 49 (expr -> ID .)
    GE              reduce using rule 49 (expr -> ID .)
    GT              reduce using rule 49 (expr -> ID .)
    EQ              reduce using rule 49 (expr -> ID .)
    NE              reduce using rule 49 (expr -> ID .)
    SEMI            reduce using rule 49 (expr -> ID .)
    PERIOD          shift and go to state 113
    LPAREN          shift and go to state 58


state 121

    (70) expr -> THIS PERIOD expr .
    (53) expr -> expr . PLUS expr
    (54) expr -> expr . MINUS expr
    (55) expr -> expr . TIMES expr
    (56) expr -> expr . DIVIDE expr
    (58) expr -> expr . LOR expr
    (59) expr -> expr . LAND expr
    (60) expr -> expr . LT expr
    (61) expr -> expr . LE expr
    (62) expr -> expr . GE expr
    (63) expr -> expr . GT expr
    (64) expr -> expr . EQ expr
    (65) expr -> expr . NE expr

    SEMI            reduce using rule 70 (expr -> THIS PERIOD expr .)
    PLUS            reduce using rule 70 (expr -> THIS PERIOD expr .)
    MINUS           reduce using rule 70 (expr -> THIS PERIOD expr .)
    TIMES           reduce using rule 70 (expr -> THIS PERIOD expr .)
    DIVIDE          reduce using rule 70 (expr -> THIS PERIOD expr .)
    LOR             reduce using rule 70 (expr -> THIS PERIOD expr .)
    LAND            reduce using rule 70 (expr -> THIS PERIOD expr .)
    LT              reduce using rule 70 (expr -> THIS PERIOD expr .)
    LE              reduce using rule 70 (expr -> THIS PERIOD expr .)
    GE              reduce using rule 70 (expr -> THIS PERIOD expr .)
    GT              reduce using rule 70 (expr -> THIS PERIOD expr .)
    EQ              reduce using rule 70 (expr -> THIS PERIOD expr .)
    NE              reduce using rule 70 (expr -> THIS PERIOD expr .)
    RPAREN          reduce using rule 70 (expr -> THIS PERIOD expr .)
    COMMA           reduce using rule 70 (expr -> THIS PERIOD expr .)

  ! PLUS            [ shift and go to state 60 ]
  ! MINUS           [ shift and go to state 61 ]
  ! TIMES           [ shift and go to state 62 ]
  ! DIVIDE          [ shift and go to state 63 ]
  ! LOR             [ shift and go to state 64 ]
  ! LAND            [ shift and go to state 65 ]
  ! LT              [ shift and go to state 66 ]
  ! LE              [ shift and go to state 67 ]
  ! GE              [ shift and go to state 68 ]
  ! GT              [ shift and go to state 69 ]
  ! EQ              [ shift and go to state 70 ]
  ! NE              [ shift and go to state 71 ]


state 122

    (71) expr -> SUPER PERIOD expr .
    (53) expr -> expr . PLUS expr
    (54) expr -> expr . MINUS expr
    (55) expr -> expr . TIMES expr
    (56) expr -> expr . DIVIDE expr
    (58) expr -> expr . LOR expr
    (59) expr -> expr . LAND expr
    (60) expr -> expr . LT expr
    (61) expr -> expr . LE expr
    (62) expr -> expr . GE expr
    (63) expr -> expr . GT expr
    (64) expr -> expr . EQ expr
    (65) expr -> expr . NE expr

    SEMI            reduce using rule 71 (expr -> SUPER PERIOD expr .)
    PLUS            reduce using rule 71 (expr -> SUPER PERIOD expr .)
    MINUS           reduce using rule 71 (expr -> SUPER PERIOD expr .)
    TIMES           reduce using rule 71 (expr -> SUPER PERIOD expr .)
    DIVIDE          reduce using rule 71 (expr -> SUPER PERIOD expr .)
    LOR             reduce using rule 71 (expr -> SUPER PERIOD expr .)
    LAND            reduce using rule 71 (expr -> SUPER PERIOD expr .)
    LT              reduce using rule 71 (expr -> SUPER PERIOD expr .)
    LE              reduce using rule 71 (expr -> SUPER PERIOD expr .)
    GE              reduce using rule 71 (expr -> SUPER PERIOD expr .)
    GT              reduce using rule 71 (expr -> SUPER PERIOD expr .)
    EQ              reduce using rule 71 (expr -> SUPER PERIOD expr .)
    NE              reduce using rule 71 (expr -> SUPER PERIOD expr .)
    RPAREN          reduce using rule 71 (expr -> SUPER PERIOD expr .)
    COMMA           reduce using rule 71 (expr -> SUPER PERIOD expr .)

  ! PLUS            [ shift and go to state 60 ]
  ! MINUS           [ shift and go to state 61 ]
  ! TIMES           [ shift and go to state 62 ]
  ! DIVIDE          [ shift and go to state 63 ]
  ! LOR             [ shift and go to state 64 ]
  ! LAND            [ shift and go to state 65 ]
  ! LT              [ shift and go to state 66 ]
  ! LE              [ shift and go to state 67 ]
  ! GE              [ shift and go to state 68 ]
  ! GT              [ shift and go to state 69 ]
  ! EQ              [ shift and go to state 70 ]
  ! NE              [ shift and go to state 71 ]


state 123

    (15) class_def -> CLASS ID COLON ID class_body .

    CLASS           reduce using rule 15 (class_def -> CLASS ID COLON ID class_body .)
    INT             reduce using rule 15 (class_def -> CLASS ID COLON ID class_body .)
    STRING          reduce using rule 15 (class_def -> CLASS ID COLON ID class_body .)
    VOID            reduce using rule 15 (class_def -> CLASS ID COLON ID class_body .)
    ID              reduce using rule 15 (class_def -> CLASS ID COLON ID class_body .)
    $end            reduce using rule 15 (class_def -> CLASS ID COLON ID class_body .)


state 124

    (16) class_body -> LBRACE . class_member_list RBRACE
    (17) class_member_list -> . class_member
    (18) class_member_list -> . empty
    (19) class_member -> . class_member_def class_next_member
    (5) empty -> .
    (20) class_member_def -> . var_def
    (21) class_member_def -> . func_def
    (45) var_def -> . var_type ID multiple_var_def
    (6) func_def -> . func_header func_body
    (24) var_type -> . INT
    (25) var_type -> . STRING
    (26) var_type -> . VOID
    (27) var_type -> . ID
    (7) func_header -> . var_type ID LPAREN param_list RPAREN

    RBRACE          reduce using rule 5 (empty -> .)
    INT             shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    ID              shift and go to state 8

    class_member_list              shift and go to state 142
    class_member                   shift and go to state 143
    empty                          shift and go to state 144
    class_member_def               shift and go to state 145
    var_def                        shift and go to state 146
    func_def                       shift and go to state 147
    var_type                       shift and go to state 148
    func_header                    shift and go to state 6

state 125

    (12) func_param_def -> var_type ID .

    COMMA           reduce using rule 12 (func_param_def -> var_type ID .)
    RPAREN          reduce using rule 12 (func_param_def -> var_type ID .)


state 126

    (7) func_header -> var_type ID LPAREN param_list RPAREN .

    LBRACE          reduce using rule 7 (func_header -> var_type ID LPAREN param_list RPAREN .)


state 127

    (11) func_param -> func_param_def next_param .

    RPAREN          reduce using rule 11 (func_param -> func_param_def next_param .)


state 128

    (13) next_param -> COMMA . func_param
    (11) func_param -> . func_param_def next_param
    (12) func_param_def -> . var_type ID
    (24) var_type -> . INT
    (25) var_type -> . STRING
    (26) var_type -> . VOID
    (27) var_type -> . ID

    INT             shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    ID              shift and go to state 8

    func_param                     shift and go to state 149
    func_param_def                 shift and go to state 90
    var_type                       shift and go to state 86

state 129

    (14) next_param -> empty .

    RPAREN          reduce using rule 14 (next_param -> empty .)


state 130

    (47) multiple_var_def -> COMMA ID . multiple_var_def
    (46) multiple_var_def -> . SEMI
    (47) multiple_var_def -> . COMMA ID multiple_var_def

    SEMI            shift and go to state 92
    COMMA           shift and go to state 93

    multiple_var_def               shift and go to state 150

state 131

    (44) var_assignment -> ID EQUALS expr SEMI .

    ID              reduce using rule 44 (var_assignment -> ID EQUALS expr SEMI .)
    RETURN          reduce using rule 44 (var_assignment -> ID EQUALS expr SEMI .)
    WHILE           reduce using rule 44 (var_assignment -> ID EQUALS expr SEMI .)
    IF              reduce using rule 44 (var_assignment -> ID EQUALS expr SEMI .)
    THIS            reduce using rule 44 (var_assignment -> ID EQUALS expr SEMI .)
    INT             reduce using rule 44 (var_assignment -> ID EQUALS expr SEMI .)
    STRING          reduce using rule 44 (var_assignment -> ID EQUALS expr SEMI .)
    VOID            reduce using rule 44 (var_assignment -> ID EQUALS expr SEMI .)
    LPAREN          reduce using rule 44 (var_assignment -> ID EQUALS expr SEMI .)
    INT_CONST       reduce using rule 44 (var_assignment -> ID EQUALS expr SEMI .)
    STRING_CONST    reduce using rule 44 (var_assignment -> ID EQUALS expr SEMI .)
    MINUS           reduce using rule 44 (var_assignment -> ID EQUALS expr SEMI .)
    LNOT            reduce using rule 44 (var_assignment -> ID EQUALS expr SEMI .)
    NEW             reduce using rule 44 (var_assignment -> ID EQUALS expr SEMI .)
    SUPER           reduce using rule 44 (var_assignment -> ID EQUALS expr SEMI .)
    RBRACE          reduce using rule 44 (var_assignment -> ID EQUALS expr SEMI .)


state 132

    (42) statement_id -> ID PERIOD ID EQUALS . expr SEMI
    (48) expr -> . LPAREN expr RPAREN
    (49) expr -> . ID
    (50) expr -> . INT_CONST
    (51) expr -> . STRING_CONST
    (52) expr -> . MINUS expr
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . LNOT expr
    (58) expr -> . expr LOR expr
    (59) expr -> . expr LAND expr
    (60) expr -> . expr LT expr
    (61) expr -> . expr LE expr
    (62) expr -> . expr GE expr
    (63) expr -> . expr GT expr
    (64) expr -> . expr EQ expr
    (65) expr -> . expr NE expr
    (66) expr -> . LPAREN INT RPAREN expr
    (67) expr -> . LPAREN STRING RPAREN expr
    (68) expr -> . NEW ID
    (69) expr -> . ID PERIOD expr
    (70) expr -> . THIS PERIOD expr
    (71) expr -> . SUPER PERIOD expr
    (72) expr -> . ID LPAREN expr_list RPAREN
    (73) expr -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 35
    ID              shift and go to state 73
    INT_CONST       shift and go to state 38
    STRING_CONST    shift and go to state 39
    MINUS           shift and go to state 40
    LNOT            shift and go to state 41
    NEW             shift and go to state 42
    THIS            shift and go to state 74
    SUPER           shift and go to state 43

    expr                           shift and go to state 151

state 133

    (72) expr -> ID LPAREN expr_list RPAREN .

    SEMI            reduce using rule 72 (expr -> ID LPAREN expr_list RPAREN .)
    PLUS            reduce using rule 72 (expr -> ID LPAREN expr_list RPAREN .)
    MINUS           reduce using rule 72 (expr -> ID LPAREN expr_list RPAREN .)
    TIMES           reduce using rule 72 (expr -> ID LPAREN expr_list RPAREN .)
    DIVIDE          reduce using rule 72 (expr -> ID LPAREN expr_list RPAREN .)
    LOR             reduce using rule 72 (expr -> ID LPAREN expr_list RPAREN .)
    LAND            reduce using rule 72 (expr -> ID LPAREN expr_list RPAREN .)
    LT              reduce using rule 72 (expr -> ID LPAREN expr_list RPAREN .)
    LE              reduce using rule 72 (expr -> ID LPAREN expr_list RPAREN .)
    GE              reduce using rule 72 (expr -> ID LPAREN expr_list RPAREN .)
    GT              reduce using rule 72 (expr -> ID LPAREN expr_list RPAREN .)
    EQ              reduce using rule 72 (expr -> ID LPAREN expr_list RPAREN .)
    NE              reduce using rule 72 (expr -> ID LPAREN expr_list RPAREN .)
    RPAREN          reduce using rule 72 (expr -> ID LPAREN expr_list RPAREN .)
    COMMA           reduce using rule 72 (expr -> ID LPAREN expr_list RPAREN .)


state 134

    (74) expr_list -> expr next_expr .

    RPAREN          reduce using rule 74 (expr_list -> expr next_expr .)


state 135

    (75) next_expr -> COMMA . expr_list
    (74) expr_list -> . expr next_expr
    (48) expr -> . LPAREN expr RPAREN
    (49) expr -> . ID
    (50) expr -> . INT_CONST
    (51) expr -> . STRING_CONST
    (52) expr -> . MINUS expr
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . LNOT expr
    (58) expr -> . expr LOR expr
    (59) expr -> . expr LAND expr
    (60) expr -> . expr LT expr
    (61) expr -> . expr LE expr
    (62) expr -> . expr GE expr
    (63) expr -> . expr GT expr
    (64) expr -> . expr EQ expr
    (65) expr -> . expr NE expr
    (66) expr -> . LPAREN INT RPAREN expr
    (67) expr -> . LPAREN STRING RPAREN expr
    (68) expr -> . NEW ID
    (69) expr -> . ID PERIOD expr
    (70) expr -> . THIS PERIOD expr
    (71) expr -> . SUPER PERIOD expr
    (72) expr -> . ID LPAREN expr_list RPAREN
    (73) expr -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 35
    ID              shift and go to state 73
    INT_CONST       shift and go to state 38
    STRING_CONST    shift and go to state 39
    MINUS           shift and go to state 40
    LNOT            shift and go to state 41
    NEW             shift and go to state 42
    THIS            shift and go to state 74
    SUPER           shift and go to state 43

    expr_list                      shift and go to state 152
    expr                           shift and go to state 99

state 136

    (76) next_expr -> empty .

    RPAREN          reduce using rule 76 (next_expr -> empty .)


state 137

    (39) statement_while -> WHILE LPAREN expr RPAREN . statement_new_scope
    (37) statement_new_scope -> . LBRACE statement RBRACE

    LBRACE          shift and go to state 17

    statement_new_scope            shift and go to state 153

state 138

    (66) expr -> LPAREN INT RPAREN expr .
    (53) expr -> expr . PLUS expr
    (54) expr -> expr . MINUS expr
    (55) expr -> expr . TIMES expr
    (56) expr -> expr . DIVIDE expr
    (58) expr -> expr . LOR expr
    (59) expr -> expr . LAND expr
    (60) expr -> expr . LT expr
    (61) expr -> expr . LE expr
    (62) expr -> expr . GE expr
    (63) expr -> expr . GT expr
    (64) expr -> expr . EQ expr
    (65) expr -> expr . NE expr

    SEMI            reduce using rule 66 (expr -> LPAREN INT RPAREN expr .)
    PLUS            reduce using rule 66 (expr -> LPAREN INT RPAREN expr .)
    MINUS           reduce using rule 66 (expr -> LPAREN INT RPAREN expr .)
    TIMES           reduce using rule 66 (expr -> LPAREN INT RPAREN expr .)
    DIVIDE          reduce using rule 66 (expr -> LPAREN INT RPAREN expr .)
    LOR             reduce using rule 66 (expr -> LPAREN INT RPAREN expr .)
    LAND            reduce using rule 66 (expr -> LPAREN INT RPAREN expr .)
    LT              reduce using rule 66 (expr -> LPAREN INT RPAREN expr .)
    LE              reduce using rule 66 (expr -> LPAREN INT RPAREN expr .)
    GE              reduce using rule 66 (expr -> LPAREN INT RPAREN expr .)
    GT              reduce using rule 66 (expr -> LPAREN INT RPAREN expr .)
    EQ              reduce using rule 66 (expr -> LPAREN INT RPAREN expr .)
    NE              reduce using rule 66 (expr -> LPAREN INT RPAREN expr .)
    RPAREN          reduce using rule 66 (expr -> LPAREN INT RPAREN expr .)
    COMMA           reduce using rule 66 (expr -> LPAREN INT RPAREN expr .)

  ! PLUS            [ shift and go to state 60 ]
  ! MINUS           [ shift and go to state 61 ]
  ! TIMES           [ shift and go to state 62 ]
  ! DIVIDE          [ shift and go to state 63 ]
  ! LOR             [ shift and go to state 64 ]
  ! LAND            [ shift and go to state 65 ]
  ! LT              [ shift and go to state 66 ]
  ! LE              [ shift and go to state 67 ]
  ! GE              [ shift and go to state 68 ]
  ! GT              [ shift and go to state 69 ]
  ! EQ              [ shift and go to state 70 ]
  ! NE              [ shift and go to state 71 ]


state 139

    (67) expr -> LPAREN STRING RPAREN expr .
    (53) expr -> expr . PLUS expr
    (54) expr -> expr . MINUS expr
    (55) expr -> expr . TIMES expr
    (56) expr -> expr . DIVIDE expr
    (58) expr -> expr . LOR expr
    (59) expr -> expr . LAND expr
    (60) expr -> expr . LT expr
    (61) expr -> expr . LE expr
    (62) expr -> expr . GE expr
    (63) expr -> expr . GT expr
    (64) expr -> expr . EQ expr
    (65) expr -> expr . NE expr

    SEMI            reduce using rule 67 (expr -> LPAREN STRING RPAREN expr .)
    PLUS            reduce using rule 67 (expr -> LPAREN STRING RPAREN expr .)
    MINUS           reduce using rule 67 (expr -> LPAREN STRING RPAREN expr .)
    TIMES           reduce using rule 67 (expr -> LPAREN STRING RPAREN expr .)
    DIVIDE          reduce using rule 67 (expr -> LPAREN STRING RPAREN expr .)
    LOR             reduce using rule 67 (expr -> LPAREN STRING RPAREN expr .)
    LAND            reduce using rule 67 (expr -> LPAREN STRING RPAREN expr .)
    LT              reduce using rule 67 (expr -> LPAREN STRING RPAREN expr .)
    LE              reduce using rule 67 (expr -> LPAREN STRING RPAREN expr .)
    GE              reduce using rule 67 (expr -> LPAREN STRING RPAREN expr .)
    GT              reduce using rule 67 (expr -> LPAREN STRING RPAREN expr .)
    EQ              reduce using rule 67 (expr -> LPAREN STRING RPAREN expr .)
    NE              reduce using rule 67 (expr -> LPAREN STRING RPAREN expr .)
    RPAREN          reduce using rule 67 (expr -> LPAREN STRING RPAREN expr .)
    COMMA           reduce using rule 67 (expr -> LPAREN STRING RPAREN expr .)

  ! PLUS            [ shift and go to state 60 ]
  ! MINUS           [ shift and go to state 61 ]
  ! TIMES           [ shift and go to state 62 ]
  ! DIVIDE          [ shift and go to state 63 ]
  ! LOR             [ shift and go to state 64 ]
  ! LAND            [ shift and go to state 65 ]
  ! LT              [ shift and go to state 66 ]
  ! LE              [ shift and go to state 67 ]
  ! GE              [ shift and go to state 68 ]
  ! GT              [ shift and go to state 69 ]
  ! EQ              [ shift and go to state 70 ]
  ! NE              [ shift and go to state 71 ]


state 140

    (38) statement_if -> IF LPAREN expr RPAREN . statement_new_scope ELSE statement_new_scope
    (37) statement_new_scope -> . LBRACE statement RBRACE

    LBRACE          shift and go to state 17

    statement_new_scope            shift and go to state 154

state 141

    (41) statement_this -> THIS PERIOD ID EQUALS . expr SEMI
    (48) expr -> . LPAREN expr RPAREN
    (49) expr -> . ID
    (50) expr -> . INT_CONST
    (51) expr -> . STRING_CONST
    (52) expr -> . MINUS expr
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . LNOT expr
    (58) expr -> . expr LOR expr
    (59) expr -> . expr LAND expr
    (60) expr -> . expr LT expr
    (61) expr -> . expr LE expr
    (62) expr -> . expr GE expr
    (63) expr -> . expr GT expr
    (64) expr -> . expr EQ expr
    (65) expr -> . expr NE expr
    (66) expr -> . LPAREN INT RPAREN expr
    (67) expr -> . LPAREN STRING RPAREN expr
    (68) expr -> . NEW ID
    (69) expr -> . ID PERIOD expr
    (70) expr -> . THIS PERIOD expr
    (71) expr -> . SUPER PERIOD expr
    (72) expr -> . ID LPAREN expr_list RPAREN
    (73) expr -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 35
    ID              shift and go to state 73
    INT_CONST       shift and go to state 38
    STRING_CONST    shift and go to state 39
    MINUS           shift and go to state 40
    LNOT            shift and go to state 41
    NEW             shift and go to state 42
    THIS            shift and go to state 74
    SUPER           shift and go to state 43

    expr                           shift and go to state 155

state 142

    (16) class_body -> LBRACE class_member_list . RBRACE

    RBRACE          shift and go to state 156


state 143

    (17) class_member_list -> class_member .

    RBRACE          reduce using rule 17 (class_member_list -> class_member .)


state 144

    (18) class_member_list -> empty .

    RBRACE          reduce using rule 18 (class_member_list -> empty .)


state 145

    (19) class_member -> class_member_def . class_next_member
    (22) class_next_member -> . class_member
    (23) class_next_member -> . empty
    (19) class_member -> . class_member_def class_next_member
    (5) empty -> .
    (20) class_member_def -> . var_def
    (21) class_member_def -> . func_def
    (45) var_def -> . var_type ID multiple_var_def
    (6) func_def -> . func_header func_body
    (24) var_type -> . INT
    (25) var_type -> . STRING
    (26) var_type -> . VOID
    (27) var_type -> . ID
    (7) func_header -> . var_type ID LPAREN param_list RPAREN

    RBRACE          reduce using rule 5 (empty -> .)
    INT             shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    ID              shift and go to state 8

    class_member_def               shift and go to state 145
    class_next_member              shift and go to state 157
    class_member                   shift and go to state 158
    empty                          shift and go to state 159
    var_def                        shift and go to state 146
    func_def                       shift and go to state 147
    var_type                       shift and go to state 148
    func_header                    shift and go to state 6

state 146

    (20) class_member_def -> var_def .

    INT             reduce using rule 20 (class_member_def -> var_def .)
    STRING          reduce using rule 20 (class_member_def -> var_def .)
    VOID            reduce using rule 20 (class_member_def -> var_def .)
    ID              reduce using rule 20 (class_member_def -> var_def .)
    RBRACE          reduce using rule 20 (class_member_def -> var_def .)


state 147

    (21) class_member_def -> func_def .

    INT             reduce using rule 21 (class_member_def -> func_def .)
    STRING          reduce using rule 21 (class_member_def -> func_def .)
    VOID            reduce using rule 21 (class_member_def -> func_def .)
    ID              reduce using rule 21 (class_member_def -> func_def .)
    RBRACE          reduce using rule 21 (class_member_def -> func_def .)


state 148

    (45) var_def -> var_type . ID multiple_var_def
    (7) func_header -> var_type . ID LPAREN param_list RPAREN

    ID              shift and go to state 160


state 149

    (13) next_param -> COMMA func_param .

    RPAREN          reduce using rule 13 (next_param -> COMMA func_param .)


state 150

    (47) multiple_var_def -> COMMA ID multiple_var_def .

    ID              reduce using rule 47 (multiple_var_def -> COMMA ID multiple_var_def .)
    RETURN          reduce using rule 47 (multiple_var_def -> COMMA ID multiple_var_def .)
    WHILE           reduce using rule 47 (multiple_var_def -> COMMA ID multiple_var_def .)
    IF              reduce using rule 47 (multiple_var_def -> COMMA ID multiple_var_def .)
    THIS            reduce using rule 47 (multiple_var_def -> COMMA ID multiple_var_def .)
    INT             reduce using rule 47 (multiple_var_def -> COMMA ID multiple_var_def .)
    STRING          reduce using rule 47 (multiple_var_def -> COMMA ID multiple_var_def .)
    VOID            reduce using rule 47 (multiple_var_def -> COMMA ID multiple_var_def .)
    LPAREN          reduce using rule 47 (multiple_var_def -> COMMA ID multiple_var_def .)
    INT_CONST       reduce using rule 47 (multiple_var_def -> COMMA ID multiple_var_def .)
    STRING_CONST    reduce using rule 47 (multiple_var_def -> COMMA ID multiple_var_def .)
    MINUS           reduce using rule 47 (multiple_var_def -> COMMA ID multiple_var_def .)
    LNOT            reduce using rule 47 (multiple_var_def -> COMMA ID multiple_var_def .)
    NEW             reduce using rule 47 (multiple_var_def -> COMMA ID multiple_var_def .)
    SUPER           reduce using rule 47 (multiple_var_def -> COMMA ID multiple_var_def .)
    RBRACE          reduce using rule 47 (multiple_var_def -> COMMA ID multiple_var_def .)


state 151

    (42) statement_id -> ID PERIOD ID EQUALS expr . SEMI
    (53) expr -> expr . PLUS expr
    (54) expr -> expr . MINUS expr
    (55) expr -> expr . TIMES expr
    (56) expr -> expr . DIVIDE expr
    (58) expr -> expr . LOR expr
    (59) expr -> expr . LAND expr
    (60) expr -> expr . LT expr
    (61) expr -> expr . LE expr
    (62) expr -> expr . GE expr
    (63) expr -> expr . GT expr
    (64) expr -> expr . EQ expr
    (65) expr -> expr . NE expr

    SEMI            shift and go to state 161
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63
    LOR             shift and go to state 64
    LAND            shift and go to state 65
    LT              shift and go to state 66
    LE              shift and go to state 67
    GE              shift and go to state 68
    GT              shift and go to state 69
    EQ              shift and go to state 70
    NE              shift and go to state 71


state 152

    (75) next_expr -> COMMA expr_list .

    RPAREN          reduce using rule 75 (next_expr -> COMMA expr_list .)


state 153

    (39) statement_while -> WHILE LPAREN expr RPAREN statement_new_scope .

    ID              reduce using rule 39 (statement_while -> WHILE LPAREN expr RPAREN statement_new_scope .)
    RETURN          reduce using rule 39 (statement_while -> WHILE LPAREN expr RPAREN statement_new_scope .)
    WHILE           reduce using rule 39 (statement_while -> WHILE LPAREN expr RPAREN statement_new_scope .)
    IF              reduce using rule 39 (statement_while -> WHILE LPAREN expr RPAREN statement_new_scope .)
    THIS            reduce using rule 39 (statement_while -> WHILE LPAREN expr RPAREN statement_new_scope .)
    INT             reduce using rule 39 (statement_while -> WHILE LPAREN expr RPAREN statement_new_scope .)
    STRING          reduce using rule 39 (statement_while -> WHILE LPAREN expr RPAREN statement_new_scope .)
    VOID            reduce using rule 39 (statement_while -> WHILE LPAREN expr RPAREN statement_new_scope .)
    LPAREN          reduce using rule 39 (statement_while -> WHILE LPAREN expr RPAREN statement_new_scope .)
    INT_CONST       reduce using rule 39 (statement_while -> WHILE LPAREN expr RPAREN statement_new_scope .)
    STRING_CONST    reduce using rule 39 (statement_while -> WHILE LPAREN expr RPAREN statement_new_scope .)
    MINUS           reduce using rule 39 (statement_while -> WHILE LPAREN expr RPAREN statement_new_scope .)
    LNOT            reduce using rule 39 (statement_while -> WHILE LPAREN expr RPAREN statement_new_scope .)
    NEW             reduce using rule 39 (statement_while -> WHILE LPAREN expr RPAREN statement_new_scope .)
    SUPER           reduce using rule 39 (statement_while -> WHILE LPAREN expr RPAREN statement_new_scope .)
    RBRACE          reduce using rule 39 (statement_while -> WHILE LPAREN expr RPAREN statement_new_scope .)


state 154

    (38) statement_if -> IF LPAREN expr RPAREN statement_new_scope . ELSE statement_new_scope

    ELSE            shift and go to state 162


state 155

    (41) statement_this -> THIS PERIOD ID EQUALS expr . SEMI
    (53) expr -> expr . PLUS expr
    (54) expr -> expr . MINUS expr
    (55) expr -> expr . TIMES expr
    (56) expr -> expr . DIVIDE expr
    (58) expr -> expr . LOR expr
    (59) expr -> expr . LAND expr
    (60) expr -> expr . LT expr
    (61) expr -> expr . LE expr
    (62) expr -> expr . GE expr
    (63) expr -> expr . GT expr
    (64) expr -> expr . EQ expr
    (65) expr -> expr . NE expr

    SEMI            shift and go to state 163
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63
    LOR             shift and go to state 64
    LAND            shift and go to state 65
    LT              shift and go to state 66
    LE              shift and go to state 67
    GE              shift and go to state 68
    GT              shift and go to state 69
    EQ              shift and go to state 70
    NE              shift and go to state 71


state 156

    (16) class_body -> LBRACE class_member_list RBRACE .

    CLASS           reduce using rule 16 (class_body -> LBRACE class_member_list RBRACE .)
    INT             reduce using rule 16 (class_body -> LBRACE class_member_list RBRACE .)
    STRING          reduce using rule 16 (class_body -> LBRACE class_member_list RBRACE .)
    VOID            reduce using rule 16 (class_body -> LBRACE class_member_list RBRACE .)
    ID              reduce using rule 16 (class_body -> LBRACE class_member_list RBRACE .)
    $end            reduce using rule 16 (class_body -> LBRACE class_member_list RBRACE .)


state 157

    (19) class_member -> class_member_def class_next_member .

    RBRACE          reduce using rule 19 (class_member -> class_member_def class_next_member .)


state 158

    (22) class_next_member -> class_member .

    RBRACE          reduce using rule 22 (class_next_member -> class_member .)


state 159

    (23) class_next_member -> empty .

    RBRACE          reduce using rule 23 (class_next_member -> empty .)


state 160

    (45) var_def -> var_type ID . multiple_var_def
    (7) func_header -> var_type ID . LPAREN param_list RPAREN
    (46) multiple_var_def -> . SEMI
    (47) multiple_var_def -> . COMMA ID multiple_var_def

    LPAREN          shift and go to state 45
    SEMI            shift and go to state 92
    COMMA           shift and go to state 93

    multiple_var_def               shift and go to state 91

state 161

    (42) statement_id -> ID PERIOD ID EQUALS expr SEMI .

    ID              reduce using rule 42 (statement_id -> ID PERIOD ID EQUALS expr SEMI .)
    RETURN          reduce using rule 42 (statement_id -> ID PERIOD ID EQUALS expr SEMI .)
    WHILE           reduce using rule 42 (statement_id -> ID PERIOD ID EQUALS expr SEMI .)
    IF              reduce using rule 42 (statement_id -> ID PERIOD ID EQUALS expr SEMI .)
    THIS            reduce using rule 42 (statement_id -> ID PERIOD ID EQUALS expr SEMI .)
    INT             reduce using rule 42 (statement_id -> ID PERIOD ID EQUALS expr SEMI .)
    STRING          reduce using rule 42 (statement_id -> ID PERIOD ID EQUALS expr SEMI .)
    VOID            reduce using rule 42 (statement_id -> ID PERIOD ID EQUALS expr SEMI .)
    LPAREN          reduce using rule 42 (statement_id -> ID PERIOD ID EQUALS expr SEMI .)
    INT_CONST       reduce using rule 42 (statement_id -> ID PERIOD ID EQUALS expr SEMI .)
    STRING_CONST    reduce using rule 42 (statement_id -> ID PERIOD ID EQUALS expr SEMI .)
    MINUS           reduce using rule 42 (statement_id -> ID PERIOD ID EQUALS expr SEMI .)
    LNOT            reduce using rule 42 (statement_id -> ID PERIOD ID EQUALS expr SEMI .)
    NEW             reduce using rule 42 (statement_id -> ID PERIOD ID EQUALS expr SEMI .)
    SUPER           reduce using rule 42 (statement_id -> ID PERIOD ID EQUALS expr SEMI .)
    RBRACE          reduce using rule 42 (statement_id -> ID PERIOD ID EQUALS expr SEMI .)


state 162

    (38) statement_if -> IF LPAREN expr RPAREN statement_new_scope ELSE . statement_new_scope
    (37) statement_new_scope -> . LBRACE statement RBRACE

    LBRACE          shift and go to state 17

    statement_new_scope            shift and go to state 164

state 163

    (41) statement_this -> THIS PERIOD ID EQUALS expr SEMI .

    ID              reduce using rule 41 (statement_this -> THIS PERIOD ID EQUALS expr SEMI .)
    RETURN          reduce using rule 41 (statement_this -> THIS PERIOD ID EQUALS expr SEMI .)
    WHILE           reduce using rule 41 (statement_this -> THIS PERIOD ID EQUALS expr SEMI .)
    IF              reduce using rule 41 (statement_this -> THIS PERIOD ID EQUALS expr SEMI .)
    THIS            reduce using rule 41 (statement_this -> THIS PERIOD ID EQUALS expr SEMI .)
    INT             reduce using rule 41 (statement_this -> THIS PERIOD ID EQUALS expr SEMI .)
    STRING          reduce using rule 41 (statement_this -> THIS PERIOD ID EQUALS expr SEMI .)
    VOID            reduce using rule 41 (statement_this -> THIS PERIOD ID EQUALS expr SEMI .)
    LPAREN          reduce using rule 41 (statement_this -> THIS PERIOD ID EQUALS expr SEMI .)
    INT_CONST       reduce using rule 41 (statement_this -> THIS PERIOD ID EQUALS expr SEMI .)
    STRING_CONST    reduce using rule 41 (statement_this -> THIS PERIOD ID EQUALS expr SEMI .)
    MINUS           reduce using rule 41 (statement_this -> THIS PERIOD ID EQUALS expr SEMI .)
    LNOT            reduce using rule 41 (statement_this -> THIS PERIOD ID EQUALS expr SEMI .)
    NEW             reduce using rule 41 (statement_this -> THIS PERIOD ID EQUALS expr SEMI .)
    SUPER           reduce using rule 41 (statement_this -> THIS PERIOD ID EQUALS expr SEMI .)
    RBRACE          reduce using rule 41 (statement_this -> THIS PERIOD ID EQUALS expr SEMI .)


state 164

    (38) statement_if -> IF LPAREN expr RPAREN statement_new_scope ELSE statement_new_scope .

    ID              reduce using rule 38 (statement_if -> IF LPAREN expr RPAREN statement_new_scope ELSE statement_new_scope .)
    RETURN          reduce using rule 38 (statement_if -> IF LPAREN expr RPAREN statement_new_scope ELSE statement_new_scope .)
    WHILE           reduce using rule 38 (statement_if -> IF LPAREN expr RPAREN statement_new_scope ELSE statement_new_scope .)
    IF              reduce using rule 38 (statement_if -> IF LPAREN expr RPAREN statement_new_scope ELSE statement_new_scope .)
    THIS            reduce using rule 38 (statement_if -> IF LPAREN expr RPAREN statement_new_scope ELSE statement_new_scope .)
    INT             reduce using rule 38 (statement_if -> IF LPAREN expr RPAREN statement_new_scope ELSE statement_new_scope .)
    STRING          reduce using rule 38 (statement_if -> IF LPAREN expr RPAREN statement_new_scope ELSE statement_new_scope .)
    VOID            reduce using rule 38 (statement_if -> IF LPAREN expr RPAREN statement_new_scope ELSE statement_new_scope .)
    LPAREN          reduce using rule 38 (statement_if -> IF LPAREN expr RPAREN statement_new_scope ELSE statement_new_scope .)
    INT_CONST       reduce using rule 38 (statement_if -> IF LPAREN expr RPAREN statement_new_scope ELSE statement_new_scope .)
    STRING_CONST    reduce using rule 38 (statement_if -> IF LPAREN expr RPAREN statement_new_scope ELSE statement_new_scope .)
    MINUS           reduce using rule 38 (statement_if -> IF LPAREN expr RPAREN statement_new_scope ELSE statement_new_scope .)
    LNOT            reduce using rule 38 (statement_if -> IF LPAREN expr RPAREN statement_new_scope ELSE statement_new_scope .)
    NEW             reduce using rule 38 (statement_if -> IF LPAREN expr RPAREN statement_new_scope ELSE statement_new_scope .)
    SUPER           reduce using rule 38 (statement_if -> IF LPAREN expr RPAREN statement_new_scope ELSE statement_new_scope .)
    RBRACE          reduce using rule 38 (statement_if -> IF LPAREN expr RPAREN statement_new_scope ELSE statement_new_scope .)

