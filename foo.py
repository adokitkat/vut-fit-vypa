
# foo.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftLORleftLANDleftEQNEleftLTLEGTGEleftPLUSMINUSleftTIMESDIVIDEnonassocLNOTleftPERIODnonassocLPARENRPARENnonassocNEWCLASS COLON COMMA DIVIDE ELSE EQ EQUALS GE GT ID IF INT INT_CONST LAND LBRACE LBRACKET LE LNOT LOR LPAREN LT MINUS NE NEW PERIOD PLUS RBRACE RBRACKET RETURN RPAREN SEMI STRING STRING_CONST SUPER THIS TIMES VOID WHILEprogram : func_def program\n                | class_def program\n                | empty empty :func_def : func_header func_bodyfunc_header : var_type ID LPAREN param_list RPARENfunc_body : LBRACE statement RBRACEparam_list : VOID\n                    | func_paramfunc_param_def : var_type IDfunc_param : func_param_def next_paramnext_param : COMMA func_param_def\n                    | emptyclass_def : CLASS ID COLON ID class_bodyclass_body : LBRACE class_members RBRACEclass_members : field_def\n                    | func_deffield_def : var_type ID multiple_field_defmultiple_field_def : SEMI\n                            | COLON ID multiple_field_def var_type : INT\n                | STRING\n                | VOID\n                | IDstatement : var_def statement\n                | var_assignment statement\n                | expr SEMI\n                | empty var_assignment : ID EQUALS expr SEMIvar_def : var_type ID multiple_var_defmultiple_var_def : SEMI\n                        | COMMA ID multiple_var_def\n    expr : ID\n            | INT_CONST\n            | STRING_CONST\n            | LPAREN expr RPAREN\n            | expr PLUS expr\n            | expr MINUS expr\n            | expr TIMES expr\n            | expr DIVIDE expr\n            | LNOT expr\n            | expr LOR expr\n            | expr LAND expr\n            | expr LT expr\n            | expr LE expr\n            | expr GE expr\n            | expr GT expr\n            | expr EQ expr\n            | expr NE expr\n    '
    
_lr_action_items = {'CLASS':([0,2,3,14,31,75,90,],[6,6,6,-5,-7,-14,-15,]),'$end':([0,1,2,3,4,12,13,14,31,75,90,],[-4,0,-4,-4,-3,-1,-2,-5,-7,-14,-15,]),'INT':([0,2,3,14,15,19,20,30,31,70,71,75,76,80,83,89,90,],[9,9,9,-5,9,9,9,9,-7,-30,-31,-14,9,9,-29,-32,-15,]),'STRING':([0,2,3,14,15,19,20,30,31,70,71,75,76,80,83,89,90,],[10,10,10,-5,10,10,10,10,-7,-30,-31,-14,10,10,-29,-32,-15,]),'VOID':([0,2,3,14,15,19,20,30,31,70,71,75,76,80,83,89,90,],[11,11,11,-5,11,11,11,55,-7,-30,-31,-14,11,11,-29,-32,-15,]),'ID':([0,2,3,6,7,8,9,10,11,14,15,19,20,23,24,27,28,29,30,31,35,36,37,38,39,40,41,42,43,44,45,46,48,53,55,70,71,72,75,76,80,83,87,89,90,94,],[7,7,7,16,-24,17,-21,-22,-23,-5,24,24,24,47,-24,50,50,52,7,-7,50,50,50,50,50,50,50,50,50,50,50,50,50,77,-23,-30,-31,82,-14,7,7,-29,91,-32,-15,95,]),'LBRACE':([5,52,78,],[15,76,-6,]),'RBRACE':([14,15,18,19,20,22,31,32,33,34,70,71,83,84,85,86,89,92,93,96,],[-5,-4,31,-4,-4,-28,-7,-25,-26,-27,-30,-31,-29,90,-16,-17,-32,-18,-19,-20,]),'INT_CONST':([15,19,20,27,28,35,36,37,38,39,40,41,42,43,44,45,46,48,70,71,83,89,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,-30,-31,-29,-32,]),'STRING_CONST':([15,19,20,27,28,35,36,37,38,39,40,41,42,43,44,45,46,48,70,71,83,89,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,-30,-31,-29,-32,]),'LPAREN':([15,17,19,20,27,28,35,36,37,38,39,40,41,42,43,44,45,46,48,70,71,83,89,91,],[27,30,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,-30,-31,-29,-32,30,]),'LNOT':([15,19,20,27,28,35,36,37,38,39,40,41,42,43,44,45,46,48,70,71,83,89,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,-30,-31,-29,-32,]),'COLON':([16,91,95,],[29,94,94,]),'SEMI':([21,24,25,26,47,50,51,58,59,60,61,62,63,64,65,66,67,68,69,73,74,82,91,95,],[34,-33,-34,-35,71,-33,-41,-37,-38,-39,-40,-42,-43,-44,-45,-46,-47,-48,-49,83,-36,71,93,93,]),'PLUS':([21,24,25,26,49,50,51,58,59,60,61,62,63,64,65,66,67,68,69,73,74,],[35,-33,-34,-35,35,-33,-41,-37,-38,-39,-40,35,35,35,35,35,35,35,35,35,-36,]),'MINUS':([21,24,25,26,49,50,51,58,59,60,61,62,63,64,65,66,67,68,69,73,74,],[36,-33,-34,-35,36,-33,-41,-37,-38,-39,-40,36,36,36,36,36,36,36,36,36,-36,]),'TIMES':([21,24,25,26,49,50,51,58,59,60,61,62,63,64,65,66,67,68,69,73,74,],[37,-33,-34,-35,37,-33,-41,37,37,-39,-40,37,37,37,37,37,37,37,37,37,-36,]),'DIVIDE':([21,24,25,26,49,50,51,58,59,60,61,62,63,64,65,66,67,68,69,73,74,],[38,-33,-34,-35,38,-33,-41,38,38,-39,-40,38,38,38,38,38,38,38,38,38,-36,]),'LOR':([21,24,25,26,49,50,51,58,59,60,61,62,63,64,65,66,67,68,69,73,74,],[39,-33,-34,-35,39,-33,-41,-37,-38,-39,-40,-42,-43,-44,-45,-46,-47,-48,-49,39,-36,]),'LAND':([21,24,25,26,49,50,51,58,59,60,61,62,63,64,65,66,67,68,69,73,74,],[40,-33,-34,-35,40,-33,-41,-37,-38,-39,-40,40,-43,-44,-45,-46,-47,-48,-49,40,-36,]),'LT':([21,24,25,26,49,50,51,58,59,60,61,62,63,64,65,66,67,68,69,73,74,],[41,-33,-34,-35,41,-33,-41,-37,-38,-39,-40,41,41,-44,-45,-46,-47,41,41,41,-36,]),'LE':([21,24,25,26,49,50,51,58,59,60,61,62,63,64,65,66,67,68,69,73,74,],[42,-33,-34,-35,42,-33,-41,-37,-38,-39,-40,42,42,-44,-45,-46,-47,42,42,42,-36,]),'GE':([21,24,25,26,49,50,51,58,59,60,61,62,63,64,65,66,67,68,69,73,74,],[43,-33,-34,-35,43,-33,-41,-37,-38,-39,-40,43,43,-44,-45,-46,-47,43,43,43,-36,]),'GT':([21,24,25,26,49,50,51,58,59,60,61,62,63,64,65,66,67,68,69,73,74,],[44,-33,-34,-35,44,-33,-41,-37,-38,-39,-40,44,44,-44,-45,-46,-47,44,44,44,-36,]),'EQ':([21,24,25,26,49,50,51,58,59,60,61,62,63,64,65,66,67,68,69,73,74,],[45,-33,-34,-35,45,-33,-41,-37,-38,-39,-40,45,45,-44,-45,-46,-47,-48,-49,45,-36,]),'NE':([21,24,25,26,49,50,51,58,59,60,61,62,63,64,65,66,67,68,69,73,74,],[46,-33,-34,-35,46,-33,-41,-37,-38,-39,-40,46,46,-44,-45,-46,-47,-48,-49,46,-36,]),'EQUALS':([24,],[48,]),'RPAREN':([25,26,49,50,51,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,74,77,79,81,88,],[-34,-35,74,-33,-41,78,-8,-9,-4,-37,-38,-39,-40,-42,-43,-44,-45,-46,-47,-48,-49,-36,-10,-11,-13,-12,]),'COMMA':([47,57,77,82,],[72,80,-10,72,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,2,3,],[1,12,13,]),'func_def':([0,2,3,76,],[2,2,2,86,]),'class_def':([0,2,3,],[3,3,3,]),'empty':([0,2,3,15,19,20,57,],[4,4,4,22,22,22,81,]),'func_header':([0,2,3,76,],[5,5,5,5,]),'var_type':([0,2,3,15,19,20,30,76,80,],[8,8,8,23,23,23,53,87,53,]),'func_body':([5,],[14,]),'statement':([15,19,20,],[18,32,33,]),'var_def':([15,19,20,],[19,19,19,]),'var_assignment':([15,19,20,],[20,20,20,]),'expr':([15,19,20,27,28,35,36,37,38,39,40,41,42,43,44,45,46,48,],[21,21,21,49,51,58,59,60,61,62,63,64,65,66,67,68,69,73,]),'param_list':([30,],[54,]),'func_param':([30,],[56,]),'func_param_def':([30,80,],[57,88,]),'multiple_var_def':([47,82,],[70,89,]),'class_body':([52,],[75,]),'next_param':([57,],[79,]),'class_members':([76,],[84,]),'field_def':([76,],[85,]),'multiple_field_def':([91,95,],[92,96,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> func_def program','program',2,'p_program','_parser.py',32),
  ('program -> class_def program','program',2,'p_program','_parser.py',33),
  ('program -> empty','program',1,'p_program','_parser.py',34),
  ('empty -> <empty>','empty',0,'p_empty','_parser.py',38),
  ('func_def -> func_header func_body','func_def',2,'p_func_def','_parser.py',43),
  ('func_header -> var_type ID LPAREN param_list RPAREN','func_header',5,'p_func_header','_parser.py',47),
  ('func_body -> LBRACE statement RBRACE','func_body',3,'p_func_body','_parser.py',51),
  ('param_list -> VOID','param_list',1,'p_param_list','_parser.py',55),
  ('param_list -> func_param','param_list',1,'p_param_list','_parser.py',56),
  ('func_param_def -> var_type ID','func_param_def',2,'p_func_param_def','_parser.py',60),
  ('func_param -> func_param_def next_param','func_param',2,'p_func_param','_parser.py',64),
  ('next_param -> COMMA func_param_def','next_param',2,'p_next_param','_parser.py',68),
  ('next_param -> empty','next_param',1,'p_next_param','_parser.py',69),
  ('class_def -> CLASS ID COLON ID class_body','class_def',5,'p_class_def','_parser.py',77),
  ('class_body -> LBRACE class_members RBRACE','class_body',3,'p_class_body','_parser.py',81),
  ('class_members -> field_def','class_members',1,'p_class_members','_parser.py',85),
  ('class_members -> func_def','class_members',1,'p_class_members','_parser.py',86),
  ('field_def -> var_type ID multiple_field_def','field_def',3,'p_field_def','_parser.py',90),
  ('multiple_field_def -> SEMI','multiple_field_def',1,'p_multiple_field_def','_parser.py',94),
  ('multiple_field_def -> COLON ID multiple_field_def','multiple_field_def',3,'p_multiple_field_def','_parser.py',95),
  ('var_type -> INT','var_type',1,'p_var_type','_parser.py',99),
  ('var_type -> STRING','var_type',1,'p_var_type','_parser.py',100),
  ('var_type -> VOID','var_type',1,'p_var_type','_parser.py',101),
  ('var_type -> ID','var_type',1,'p_var_type','_parser.py',102),
  ('statement -> var_def statement','statement',2,'p_statement','_parser.py',107),
  ('statement -> var_assignment statement','statement',2,'p_statement','_parser.py',108),
  ('statement -> expr SEMI','statement',2,'p_statement','_parser.py',109),
  ('statement -> empty','statement',1,'p_statement','_parser.py',110),
  ('var_assignment -> ID EQUALS expr SEMI','var_assignment',4,'p_var_assignment','_parser.py',114),
  ('var_def -> var_type ID multiple_var_def','var_def',3,'p_var_def','_parser.py',119),
  ('multiple_var_def -> SEMI','multiple_var_def',1,'p_multiple_var_def','_parser.py',123),
  ('multiple_var_def -> COMMA ID multiple_var_def','multiple_var_def',3,'p_multiple_var_def','_parser.py',124),
  ('expr -> ID','expr',1,'p_expr','_parser.py',129),
  ('expr -> INT_CONST','expr',1,'p_expr','_parser.py',130),
  ('expr -> STRING_CONST','expr',1,'p_expr','_parser.py',131),
  ('expr -> LPAREN expr RPAREN','expr',3,'p_expr','_parser.py',132),
  ('expr -> expr PLUS expr','expr',3,'p_expr','_parser.py',133),
  ('expr -> expr MINUS expr','expr',3,'p_expr','_parser.py',134),
  ('expr -> expr TIMES expr','expr',3,'p_expr','_parser.py',135),
  ('expr -> expr DIVIDE expr','expr',3,'p_expr','_parser.py',136),
  ('expr -> LNOT expr','expr',2,'p_expr','_parser.py',137),
  ('expr -> expr LOR expr','expr',3,'p_expr','_parser.py',138),
  ('expr -> expr LAND expr','expr',3,'p_expr','_parser.py',139),
  ('expr -> expr LT expr','expr',3,'p_expr','_parser.py',140),
  ('expr -> expr LE expr','expr',3,'p_expr','_parser.py',141),
  ('expr -> expr GE expr','expr',3,'p_expr','_parser.py',142),
  ('expr -> expr GT expr','expr',3,'p_expr','_parser.py',143),
  ('expr -> expr EQ expr','expr',3,'p_expr','_parser.py',144),
  ('expr -> expr NE expr','expr',3,'p_expr','_parser.py',145),
]
